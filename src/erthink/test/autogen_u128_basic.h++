// The contents of this file are generated automatically.
// You should not edit it manually.

/* *INDENT-OFF* */
/* clang-format off */

TEST(u128, autogen_basic_0) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x9cbcef211d71461b));
  const U128 B = U128(UINT64_C(0x14057b7f58f3b77c));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xb0c26aa07664fd97)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x88b773a1c47d8e9f)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x88b9945e4582f167)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x9cbdff7f5df3f77f)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x14046b2118710618)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x0c421dfc01082124), UINT64_C(0xdb6a231a0f9c4214)));
  EXPECT_EQ(-A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x634310dee28eb9e5)));
  EXPECT_EQ(~A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x634310dee28eb9e4)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000007)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x10968ea5aec741b7)));
  EXPECT_EQ(A >> 124, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 124, U128(UINT64_C(0xb000000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xb0c26aa07664fd97)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x88b773a1c47d8e9f)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x88b9945e4582f167)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x9cbdff7f5df3f77f)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x14046b2118710618)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x0c421dfc01082124), UINT64_C(0xdb6a231a0f9c4214)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000007)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x10968ea5aec741b7)));
  EXPECT_EQ((T = A, T >>= 124), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 124), U128(UINT64_C(0xb000000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 124), U128(UINT64_C(0x0000000000000009), UINT64_C(0xcbcef211d71461b0)));
  EXPECT_EQ(rol(A, 124), U128(UINT64_C(0xb000000000000000), UINT64_C(0x09cbcef211d71461)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x9cbcef211d71461b)));
  EXPECT_EQ(T, U128(UINT64_C(0x9cbcef211d71461c)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x9cbcef211d71461b)));
  EXPECT_EQ(T, U128(UINT64_C(0x9cbcef211d71461a)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x9cbcef211d71461c)));
  EXPECT_EQ(T, U128(UINT64_C(0x9cbcef211d71461c)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x9cbcef211d71461a)));
  EXPECT_EQ(T, U128(UINT64_C(0x9cbcef211d71461a)));
}

TEST(u128, autogen_basic_1) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x03883cbd21487ac5), UINT64_C(0x48263883b6b5d0f0));
  const U128 B = U128(UINT64_C(0xf926c46927cf390e));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x03883cbd21487ac6), UINT64_C(0x414cfcecde8509fe)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x03883cbd21487ac4), UINT64_C(0x4eff741a8ee697e2)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x03883cbd21487ac5), UINT64_C(0xb100fcea917ae9fe)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x03883cbd21487ac5), UINT64_C(0xf926fcebb7fff9fe)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x4826000126851000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xb528abdca405ca7d), UINT64_C(0xd02d4d2afb86dd20)));
  EXPECT_EQ(-A, U128(UINT64_C(0xfc77c342deb7853a), UINT64_C(0xb7d9c77c494a2f10)));
  EXPECT_EQ(~A, U128(UINT64_C(0xfc77c342deb7853a), UINT64_C(0xb7d9c77c494a2f0f)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x03a117b09d99e048)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x60ba9ba483238500)));
  EXPECT_EQ(A >> 14, U128(UINT64_C(0x00000e20f2f48521), UINT64_C(0xeb152098e20edad7)));
  EXPECT_EQ(A << 14, U128(UINT64_C(0x0f2f48521eb15209), UINT64_C(0x8e20edad743c0000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x03883cbd21487ac6), UINT64_C(0x414cfcecde8509fe)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x03883cbd21487ac4), UINT64_C(0x4eff741a8ee697e2)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x03883cbd21487ac5), UINT64_C(0xb100fcea917ae9fe)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x03883cbd21487ac5), UINT64_C(0xf926fcebb7fff9fe)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x4826000126851000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xb528abdca405ca7d), UINT64_C(0xd02d4d2afb86dd20)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x03a117b09d99e048)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x60ba9ba483238500)));
  EXPECT_EQ((T = A, T >>= 14), U128(UINT64_C(0x00000e20f2f48521), UINT64_C(0xeb152098e20edad7)));
  EXPECT_EQ((T = A, T <<= 14), U128(UINT64_C(0x0f2f48521eb15209), UINT64_C(0x8e20edad743c0000)));
  EXPECT_EQ(ror(A, 14), U128(UINT64_C(0x43c00e20f2f48521), UINT64_C(0xeb152098e20edad7)));
  EXPECT_EQ(rol(A, 14), U128(UINT64_C(0x0f2f48521eb15209), UINT64_C(0x8e20edad743c00e2)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x03883cbd21487ac5), UINT64_C(0x48263883b6b5d0f0)));
  EXPECT_EQ(T, U128(UINT64_C(0x03883cbd21487ac5), UINT64_C(0x48263883b6b5d0f1)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x03883cbd21487ac5), UINT64_C(0x48263883b6b5d0f0)));
  EXPECT_EQ(T, U128(UINT64_C(0x03883cbd21487ac5), UINT64_C(0x48263883b6b5d0ef)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x03883cbd21487ac5), UINT64_C(0x48263883b6b5d0f1)));
  EXPECT_EQ(T, U128(UINT64_C(0x03883cbd21487ac5), UINT64_C(0x48263883b6b5d0f1)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x03883cbd21487ac5), UINT64_C(0x48263883b6b5d0ef)));
  EXPECT_EQ(T, U128(UINT64_C(0x03883cbd21487ac5), UINT64_C(0x48263883b6b5d0ef)));
}

TEST(u128, autogen_basic_2) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xac61292685c8f6c9));
  const U128 B = U128(UINT64_C(0xbcb88e5423b44b7f), UINT64_C(0x4a79ddac5477c7a2));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xbcb88e5423b44b7f), UINT64_C(0xf6db06d2da40be6b)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x434771abdc4bb481), UINT64_C(0x61e74b7a31512f27)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xbcb88e5423b44b7f), UINT64_C(0xe618f48ad1bf316b)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xbcb88e5423b44b7f), UINT64_C(0xee79fdaed5fff7eb)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x086109240440c680)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xbc14db62bfe31481), UINT64_C(0x805971d08c716a32)));
  EXPECT_EQ(-A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x539ed6d97a370937)));
  EXPECT_EQ(~A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x539ed6d97a370936)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0xac61292685c8f6c9)));
  EXPECT_EQ(A >> 34, U128(UINT64_C(0x000000002b184a49)));
  EXPECT_EQ(A << 34, U128(UINT64_C(0x00000002b184a49a), UINT64_C(0x1723db2400000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xbcb88e5423b44b7f), UINT64_C(0xf6db06d2da40be6b)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x434771abdc4bb481), UINT64_C(0x61e74b7a31512f27)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xbcb88e5423b44b7f), UINT64_C(0xe618f48ad1bf316b)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xbcb88e5423b44b7f), UINT64_C(0xee79fdaed5fff7eb)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x086109240440c680)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xbc14db62bfe31481), UINT64_C(0x805971d08c716a32)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0xac61292685c8f6c9)));
  EXPECT_EQ((T = A, T >>= 34), U128(UINT64_C(0x000000002b184a49)));
  EXPECT_EQ((T = A, T <<= 34), U128(UINT64_C(0x00000002b184a49a), UINT64_C(0x1723db2400000000)));
  EXPECT_EQ(ror(A, 34), U128(UINT64_C(0xa1723db240000000), UINT64_C(0x000000002b184a49)));
  EXPECT_EQ(rol(A, 34), U128(UINT64_C(0x00000002b184a49a), UINT64_C(0x1723db2400000000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xac61292685c8f6c9)));
  EXPECT_EQ(T, U128(UINT64_C(0xac61292685c8f6ca)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xac61292685c8f6c9)));
  EXPECT_EQ(T, U128(UINT64_C(0xac61292685c8f6c8)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xac61292685c8f6ca)));
  EXPECT_EQ(T, U128(UINT64_C(0xac61292685c8f6ca)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xac61292685c8f6c8)));
  EXPECT_EQ(T, U128(UINT64_C(0xac61292685c8f6c8)));
}

TEST(u128, autogen_basic_3) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xb5685fe34b631776), UINT64_C(0xb7b9fc3b10242b0d));
  const U128 B = U128(UINT64_C(0x34cb50337d2599a4), UINT64_C(0x029b71f4baafdf23));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xea33b016c888b11a), UINT64_C(0xba556e2fcad40a30)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x809d0fafce3d7dd2), UINT64_C(0xb51e8a4655744bea)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x81a30fd036468ed2), UINT64_C(0xb5228dcfaa8bf42e)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xb5eb5ff37f679ff6), UINT64_C(0xb7bbfdffbaafff2f)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x3448502349211124), UINT64_C(0x0299703010240b01)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x96589caed5e63aa7), UINT64_C(0xfb980487965535c7)));
  EXPECT_EQ(-A, U128(UINT64_C(0x4a97a01cb49ce889), UINT64_C(0x484603c4efdbd4f3)));
  EXPECT_EQ(~A, U128(UINT64_C(0x4a97a01cb49ce889), UINT64_C(0x484603c4efdbd4f2)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000003)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x17066f48d3f24a8a), UINT64_C(0xafe7a65ce0148da4)));
  EXPECT_EQ(A >> 35, U128(UINT64_C(0x0000000016ad0bfc), UINT64_C(0x696c62eed6f73f87)));
  EXPECT_EQ(A << 35, U128(UINT64_C(0x5b18bbb5bdcfe1d8), UINT64_C(0x8121586800000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xea33b016c888b11a), UINT64_C(0xba556e2fcad40a30)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x809d0fafce3d7dd2), UINT64_C(0xb51e8a4655744bea)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x81a30fd036468ed2), UINT64_C(0xb5228dcfaa8bf42e)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xb5eb5ff37f679ff6), UINT64_C(0xb7bbfdffbaafff2f)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x3448502349211124), UINT64_C(0x0299703010240b01)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x96589caed5e63aa7), UINT64_C(0xfb980487965535c7)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000003)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x17066f48d3f24a8a), UINT64_C(0xafe7a65ce0148da4)));
  EXPECT_EQ((T = A, T >>= 35), U128(UINT64_C(0x0000000016ad0bfc), UINT64_C(0x696c62eed6f73f87)));
  EXPECT_EQ((T = A, T <<= 35), U128(UINT64_C(0x5b18bbb5bdcfe1d8), UINT64_C(0x8121586800000000)));
  EXPECT_EQ(ror(A, 35), U128(UINT64_C(0x62048561b6ad0bfc), UINT64_C(0x696c62eed6f73f87)));
  EXPECT_EQ(rol(A, 35), U128(UINT64_C(0x5b18bbb5bdcfe1d8), UINT64_C(0x8121586dab42ff1a)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xb5685fe34b631776), UINT64_C(0xb7b9fc3b10242b0d)));
  EXPECT_EQ(T, U128(UINT64_C(0xb5685fe34b631776), UINT64_C(0xb7b9fc3b10242b0e)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xb5685fe34b631776), UINT64_C(0xb7b9fc3b10242b0d)));
  EXPECT_EQ(T, U128(UINT64_C(0xb5685fe34b631776), UINT64_C(0xb7b9fc3b10242b0c)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xb5685fe34b631776), UINT64_C(0xb7b9fc3b10242b0e)));
  EXPECT_EQ(T, U128(UINT64_C(0xb5685fe34b631776), UINT64_C(0xb7b9fc3b10242b0e)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xb5685fe34b631776), UINT64_C(0xb7b9fc3b10242b0c)));
  EXPECT_EQ(T, U128(UINT64_C(0xb5685fe34b631776), UINT64_C(0xb7b9fc3b10242b0c)));
}

TEST(u128, autogen_basic_4) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x4ab1ca18caaabc8a), UINT64_C(0xd8819fffff451b91));
  const U128 B = U128(UINT64_C(0x61843600a9af8598), UINT64_C(0x14178854c0006507));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xac360019745a4222), UINT64_C(0xec992854bf458098)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xe92d941820fb36f2), UINT64_C(0xc46a17ab3f44b68a)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x2b35fc1863053912), UINT64_C(0xcc9617ab3f457e96)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x6bb5fe18ebafbd9a), UINT64_C(0xdc979fffff457f97)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x4080020088aa8488), UINT64_C(0x10018854c0000101)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xc55b45d35a62af48), UINT64_C(0x567847f6fec3f5f7)));
  EXPECT_EQ(-A, U128(UINT64_C(0xb54e35e735554375), UINT64_C(0x277e600000bae46f)));
  EXPECT_EQ(~A, U128(UINT64_C(0xb54e35e735554375), UINT64_C(0x277e600000bae46e)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x4ab1ca18caaabc8a), UINT64_C(0xd8819fffff451b91)));
  EXPECT_EQ(A >> 7, U128(UINT64_C(0x0095639431955579), UINT64_C(0x15b1033ffffe8a37)));
  EXPECT_EQ(A << 7, U128(UINT64_C(0x58e50c65555e456c), UINT64_C(0x40cfffffa28dc880)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xac360019745a4222), UINT64_C(0xec992854bf458098)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xe92d941820fb36f2), UINT64_C(0xc46a17ab3f44b68a)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x2b35fc1863053912), UINT64_C(0xcc9617ab3f457e96)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x6bb5fe18ebafbd9a), UINT64_C(0xdc979fffff457f97)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x4080020088aa8488), UINT64_C(0x10018854c0000101)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xc55b45d35a62af48), UINT64_C(0x567847f6fec3f5f7)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x4ab1ca18caaabc8a), UINT64_C(0xd8819fffff451b91)));
  EXPECT_EQ((T = A, T >>= 7), U128(UINT64_C(0x0095639431955579), UINT64_C(0x15b1033ffffe8a37)));
  EXPECT_EQ((T = A, T <<= 7), U128(UINT64_C(0x58e50c65555e456c), UINT64_C(0x40cfffffa28dc880)));
  EXPECT_EQ(ror(A, 7), U128(UINT64_C(0x2295639431955579), UINT64_C(0x15b1033ffffe8a37)));
  EXPECT_EQ(rol(A, 7), U128(UINT64_C(0x58e50c65555e456c), UINT64_C(0x40cfffffa28dc8a5)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x4ab1ca18caaabc8a), UINT64_C(0xd8819fffff451b91)));
  EXPECT_EQ(T, U128(UINT64_C(0x4ab1ca18caaabc8a), UINT64_C(0xd8819fffff451b92)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x4ab1ca18caaabc8a), UINT64_C(0xd8819fffff451b91)));
  EXPECT_EQ(T, U128(UINT64_C(0x4ab1ca18caaabc8a), UINT64_C(0xd8819fffff451b90)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x4ab1ca18caaabc8a), UINT64_C(0xd8819fffff451b92)));
  EXPECT_EQ(T, U128(UINT64_C(0x4ab1ca18caaabc8a), UINT64_C(0xd8819fffff451b92)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x4ab1ca18caaabc8a), UINT64_C(0xd8819fffff451b90)));
  EXPECT_EQ(T, U128(UINT64_C(0x4ab1ca18caaabc8a), UINT64_C(0xd8819fffff451b90)));
}

TEST(u128, autogen_basic_5) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xdac0fee655d98ade), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0xdf43bf07369f48cc), UINT64_C(0xd60af40a8540812b));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xba04bded8c78d3aa), UINT64_C(0xd60af40a8540812b)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xfb7d3fdf1f3a4211), UINT64_C(0x29f50bf57abf7ed5)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x058341e16346c212), UINT64_C(0xd60af40a8540812b)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xdfc3ffe777dfcade), UINT64_C(0xd60af40a8540812b)));
  EXPECT_EQ(A & B, U128(UINT64_C(0xda40be06149908cc), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x169362271804314a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0x253f0119aa267522), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0x253f0119aa267521), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0xdac0fee655d98ade), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 43, U128(UINT64_C(0x00000000001b581f), UINT64_C(0xdccabb315bc00000)));
  EXPECT_EQ(A << 43, U128(UINT64_C(0xcc56f00000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xba04bded8c78d3aa), UINT64_C(0xd60af40a8540812b)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xfb7d3fdf1f3a4211), UINT64_C(0x29f50bf57abf7ed5)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x058341e16346c212), UINT64_C(0xd60af40a8540812b)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xdfc3ffe777dfcade), UINT64_C(0xd60af40a8540812b)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0xda40be06149908cc), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x169362271804314a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0xdac0fee655d98ade), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 43), U128(UINT64_C(0x00000000001b581f), UINT64_C(0xdccabb315bc00000)));
  EXPECT_EQ((T = A, T <<= 43), U128(UINT64_C(0xcc56f00000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 43), U128(UINT64_C(0x00000000001b581f), UINT64_C(0xdccabb315bc00000)));
  EXPECT_EQ(rol(A, 43), U128(UINT64_C(0xcc56f00000000000), UINT64_C(0x000006d607f732ae)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xdac0fee655d98ade), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0xdac0fee655d98ade), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xdac0fee655d98ade), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0xdac0fee655d98add), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xdac0fee655d98ade), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0xdac0fee655d98ade), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xdac0fee655d98add), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0xdac0fee655d98add), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_6) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d178f));
  const U128 B = U128(UINT64_C(0xb3ca1c70b5bf0c55), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xd33c30b5d052e395), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x6ba7f7d464d4caeb), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xacb80835af2cdb15), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xbffa1c75bfbfdf55), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x1342144010930440), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xf3cf3a2f2f04867b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0xe08debbae56c28bf), UINT64_C(0xcc5c79f8bc92e871)));
  EXPECT_EQ(~A, U128(UINT64_C(0xe08debbae56c28bf), UINT64_C(0xcc5c79f8bc92e870)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xd33c30b5d052e395), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x6ba7f7d464d4caeb), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xacb80835af2cdb15), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xbffa1c75bfbfdf55), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x1342144010930440), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xf3cf3a2f2f04867b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ(T, U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d1790)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d178f)));
  EXPECT_EQ(T, U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d178e)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d1790)));
  EXPECT_EQ(T, U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d1790)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d178e)));
  EXPECT_EQ(T, U128(UINT64_C(0x1f7214451a93d740), UINT64_C(0x33a38607436d178e)));
}

TEST(u128, autogen_basic_7) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xc7d9bac453d18159), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0xe260b6d91a7f9672), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xaa3a719d6e5117cb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xe57903eb3951eae7), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x25b90c1d49ae172b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xe7f9bedd5bff977b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, U128(UINT64_C(0xc240b2c012518050), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0x3826453bac2e7ea7), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0x3826453bac2e7ea6), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0xc7d9bac453d18159), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0xc7d9bac453d18159), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0xc7d9bac453d18159), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xaa3a719d6e5117cb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xe57903eb3951eae7), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x25b90c1d49ae172b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xe7f9bedd5bff977b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0xc240b2c012518050), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0xc7d9bac453d18159), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0xc7d9bac453d18159), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0xc7d9bac453d18159), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0xc7d9bac453d18159), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0xc7d9bac453d18159), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xc7d9bac453d18159), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0xc7d9bac453d18159), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xc7d9bac453d18159), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0xc7d9bac453d18158), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xc7d9bac453d18159), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0xc7d9bac453d18159), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xc7d9bac453d18158), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0xc7d9bac453d18158), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_8) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xd1d0ed40fc894c33), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0x265f4192573364f4));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xd1d0ed40fc894c33), UINT64_C(0x265f4192573364f4)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xd1d0ed40fc894c32), UINT64_C(0xd9a0be6da8cc9b0c)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xd1d0ed40fc894c33), UINT64_C(0x265f4192573364f4)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xd1d0ed40fc894c33), UINT64_C(0x265f4192573364f4)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xad27e4ebd7c98c9c), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0x2e2f12bf0376b3cd), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0x2e2f12bf0376b3cc), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000005), UINT64_C(0x77ca97ca5b4e1f73)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x070d67a01c581a64)));
  EXPECT_EQ(A >> 116, U128(UINT64_C(0x0000000000000d1d)));
  EXPECT_EQ(A << 116, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xd1d0ed40fc894c33), UINT64_C(0x265f4192573364f4)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xd1d0ed40fc894c32), UINT64_C(0xd9a0be6da8cc9b0c)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xd1d0ed40fc894c33), UINT64_C(0x265f4192573364f4)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xd1d0ed40fc894c33), UINT64_C(0x265f4192573364f4)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xad27e4ebd7c98c9c), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000005), UINT64_C(0x77ca97ca5b4e1f73)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x070d67a01c581a64)));
  EXPECT_EQ((T = A, T >>= 116), U128(UINT64_C(0x0000000000000d1d)));
  EXPECT_EQ((T = A, T <<= 116), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 116), U128(UINT64_C(0x0ed40fc894c33000), UINT64_C(0x0000000000000d1d)));
  EXPECT_EQ(rol(A, 116), U128(UINT64_C(0x000d1d0ed40fc894), UINT64_C(0xc330000000000000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xd1d0ed40fc894c33), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0xd1d0ed40fc894c33), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xd1d0ed40fc894c33), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0xd1d0ed40fc894c32), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xd1d0ed40fc894c33), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0xd1d0ed40fc894c33), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xd1d0ed40fc894c32), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0xd1d0ed40fc894c32), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_9) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x5cdce323e9ac3e9d));
  const U128 B = U128(UINT64_C(0xe2242cb2f6063346), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xe2242cb2f6063346), UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x1ddbd34d09f9ccba), UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xe2242cb2f6063346), UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xe2242cb2f6063346), UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xb7a3c6bd8b4065ee), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(-INT64_C(6691472889749454493)));
  EXPECT_EQ(~A, U128(-INT64_C(6691472889749454494)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xe2242cb2f6063346), UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x1ddbd34d09f9ccba), UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xe2242cb2f6063346), UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xe2242cb2f6063346), UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xb7a3c6bd8b4065ee), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ(T, U128(UINT64_C(0x5cdce323e9ac3e9e)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x5cdce323e9ac3e9d)));
  EXPECT_EQ(T, U128(UINT64_C(0x5cdce323e9ac3e9c)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x5cdce323e9ac3e9e)));
  EXPECT_EQ(T, U128(UINT64_C(0x5cdce323e9ac3e9e)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x5cdce323e9ac3e9c)));
  EXPECT_EQ(T, U128(UINT64_C(0x5cdce323e9ac3e9c)));
}

TEST(u128, autogen_basic_10) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(-INT64_C(2776943647377853094));
  const U128 B = U128(UINT64_C(0xdf70032b8b1f65e8), UINT64_C(0x11fbf97a2f828317));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xdf70032b8b1f65e7), UINT64_C(0xeb7249f160467871)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x208ffcd474e09a17), UINT64_C(0xc77a56fd01417243)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x208ffcd474e09a17), UINT64_C(0xc88da90d1f41764d)));
  EXPECT_EQ(A | B, U128(-INT64_C(2738195723492001953)));
  EXPECT_EQ(A & B, U128(UINT64_C(0xdf70032b8b1f65e8), UINT64_C(0x1172507220828112)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x6e56711c93e20957), UINT64_C(0x338e6d1bc5dc1916)));
  EXPECT_EQ(-A, U128(UINT64_C(0x2689af88cf3c0aa6)));
  EXPECT_EQ(~A, U128(UINT64_C(0x2689af88cf3c0aa5)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x208ffcd474e09a17), UINT64_C(0xc77a56fd01417243)));
  EXPECT_EQ(A >> 23, U128(UINT64_C(0x000001ffffffffff), UINT64_C(0xffffffb2eca0ee61)));
  EXPECT_EQ(A << 23, U128(UINT64_C(0xffffffffffecbb28), UINT64_C(0x3b9861faad000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xdf70032b8b1f65e7), UINT64_C(0xeb7249f160467871)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x208ffcd474e09a17), UINT64_C(0xc77a56fd01417243)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x208ffcd474e09a17), UINT64_C(0xc88da90d1f41764d)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(2738195723492001953)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0xdf70032b8b1f65e8), UINT64_C(0x1172507220828112)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x6e56711c93e20957), UINT64_C(0x338e6d1bc5dc1916)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x208ffcd474e09a17), UINT64_C(0xc77a56fd01417243)));
  EXPECT_EQ((T = A, T >>= 23), U128(UINT64_C(0x000001ffffffffff), UINT64_C(0xffffffb2eca0ee61)));
  EXPECT_EQ((T = A, T <<= 23), U128(UINT64_C(0xffffffffffecbb28), UINT64_C(0x3b9861faad000000)));
  EXPECT_EQ(ror(A, 23), U128(UINT64_C(0x87eab5ffffffffff), UINT64_C(0xffffffb2eca0ee61)));
  EXPECT_EQ(rol(A, 23), U128(UINT64_C(0xffffffffffecbb28), UINT64_C(0x3b9861faad7fffff)));
  EXPECT_EQ((T = A, T++), U128(-INT64_C(2776943647377853094)));
  EXPECT_EQ(T, U128(-INT64_C(2776943647377853093)));
  EXPECT_EQ((T = A, T--), U128(-INT64_C(2776943647377853094)));
  EXPECT_EQ(T, U128(-INT64_C(2776943647377853095)));
  EXPECT_EQ((T = A, ++T), U128(-INT64_C(2776943647377853093)));
  EXPECT_EQ(T, U128(-INT64_C(2776943647377853093)));
  EXPECT_EQ((T = A, --T), U128(-INT64_C(2776943647377853095)));
  EXPECT_EQ(T, U128(-INT64_C(2776943647377853095)));
}

TEST(u128, autogen_basic_11) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0x107465900254603b));
  const U128 B = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x215c395a45f34821));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x36f26ae0bb288e1b), UINT64_C(0x31d09eea4847a85c)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0xef182c35bc61181a)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xc90d951f44d771e3), UINT64_C(0x31285cca47a7281a)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x317c7dda47f7683b)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0x0054211000504021)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xbcb94c4bbe874fbf), UINT64_C(0xdf2f83fd46f1ff9b)));
  EXPECT_EQ(-A, U128(UINT64_C(0xc90d951f44d771e3), UINT64_C(0xef8b9a6ffdab9fc5)));
  EXPECT_EQ(~A, U128(UINT64_C(0xc90d951f44d771e3), UINT64_C(0xef8b9a6ffdab9fc4)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0x107465900254603b)));
  EXPECT_EQ(A >> 33, U128(UINT64_C(0x000000001b793570), UINT64_C(0x5d94470e083a32c8)));
  EXPECT_EQ(A << 33, U128(UINT64_C(0x76511c3820e8cb20), UINT64_C(0x04a8c07600000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x36f26ae0bb288e1b), UINT64_C(0x31d09eea4847a85c)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0xef182c35bc61181a)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xc90d951f44d771e3), UINT64_C(0x31285cca47a7281a)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x317c7dda47f7683b)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0x0054211000504021)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xbcb94c4bbe874fbf), UINT64_C(0xdf2f83fd46f1ff9b)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0x107465900254603b)));
  EXPECT_EQ((T = A, T >>= 33), U128(UINT64_C(0x000000001b793570), UINT64_C(0x5d94470e083a32c8)));
  EXPECT_EQ((T = A, T <<= 33), U128(UINT64_C(0x76511c3820e8cb20), UINT64_C(0x04a8c07600000000)));
  EXPECT_EQ(ror(A, 33), U128(UINT64_C(0x012a301d9b793570), UINT64_C(0x5d94470e083a32c8)));
  EXPECT_EQ(rol(A, 33), U128(UINT64_C(0x76511c3820e8cb20), UINT64_C(0x04a8c0766de4d5c1)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0x107465900254603b)));
  EXPECT_EQ(T, U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0x107465900254603c)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0x107465900254603b)));
  EXPECT_EQ(T, U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0x107465900254603a)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0x107465900254603c)));
  EXPECT_EQ(T, U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0x107465900254603c)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0x107465900254603a)));
  EXPECT_EQ(T, U128(UINT64_C(0x36f26ae0bb288e1c), UINT64_C(0x107465900254603a)));
}

TEST(u128, autogen_basic_12) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x487c3e8ea482e1e5));
  const U128 B = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x23985503c250b0ae));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xfffffffffffffffe), UINT64_C(0x6c14939266d39293)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x24e3e98ae2323137)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x6be46b8d66d2514b)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x6bfc7f8fe6d2f1ef)));
  EXPECT_EQ(A & B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x001814028000a0a4)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x9dff8ad28f9b1893), UINT64_C(0x2634dcd2edd2f9a6)));
  EXPECT_EQ(-A, U128(UINT64_C(0xb783c1715b7d1e1b)));
  EXPECT_EQ(~A, U128(UINT64_C(0xb783c1715b7d1e1a)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x24e3e98ae2323137)));
  EXPECT_EQ(A >> 46, U128(UINT64_C(0x000000000003ffff), UINT64_C(0xfffffffffffd21f0)));
  EXPECT_EQ(A << 46, U128(UINT64_C(0xffffd21f0fa3a920), UINT64_C(0xb879400000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xfffffffffffffffe), UINT64_C(0x6c14939266d39293)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x24e3e98ae2323137)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x6be46b8d66d2514b)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x6bfc7f8fe6d2f1ef)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x001814028000a0a4)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x9dff8ad28f9b1893), UINT64_C(0x2634dcd2edd2f9a6)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x24e3e98ae2323137)));
  EXPECT_EQ((T = A, T >>= 46), U128(UINT64_C(0x000000000003ffff), UINT64_C(0xfffffffffffd21f0)));
  EXPECT_EQ((T = A, T <<= 46), U128(UINT64_C(0xffffd21f0fa3a920), UINT64_C(0xb879400000000000)));
  EXPECT_EQ(ror(A, 46), U128(UINT64_C(0xfa3a920b8797ffff), UINT64_C(0xfffffffffffd21f0)));
  EXPECT_EQ(rol(A, 46), U128(UINT64_C(0xffffd21f0fa3a920), UINT64_C(0xb8797fffffffffff)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x487c3e8ea482e1e5)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x487c3e8ea482e1e6)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x487c3e8ea482e1e5)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x487c3e8ea482e1e4)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x487c3e8ea482e1e6)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x487c3e8ea482e1e6)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x487c3e8ea482e1e4)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x487c3e8ea482e1e4)));
}

TEST(u128, autogen_basic_13) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x36a495f9c66cc79f));
  const U128 B = U128(UINT64_C(0x1286d2ad46c2d190));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x492b68a70d2f992f)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x241dc34c7fa9f60f)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2422475480ae160f)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x36a6d7fdc6eed79f)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x128490a94640c190)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xf16d86fcc9498671), UINT64_C(0x0d0cb8f62ca71870)));
  EXPECT_EQ(-A, U128(UINT64_C(0xc95b6a0639933861)));
  EXPECT_EQ(~A, U128(UINT64_C(0xc95b6a0639933860)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x000000000000000d), UINT64_C(0xd163ebcb3795fafa)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x0ea43a0e82b580ff)));
  EXPECT_EQ(A >> 16, U128(UINT64_C(0x0000ffffffffffff), UINT64_C(0xffff36a495f9c66c)));
  EXPECT_EQ(A << 16, U128(UINT64_C(0xffffffffffff36a4), UINT64_C(0x95f9c66cc79f0000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x492b68a70d2f992f)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x241dc34c7fa9f60f)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2422475480ae160f)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x36a6d7fdc6eed79f)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x128490a94640c190)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xf16d86fcc9498671), UINT64_C(0x0d0cb8f62ca71870)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x000000000000000d), UINT64_C(0xd163ebcb3795fafa)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x0ea43a0e82b580ff)));
  EXPECT_EQ((T = A, T >>= 16), U128(UINT64_C(0x0000ffffffffffff), UINT64_C(0xffff36a495f9c66c)));
  EXPECT_EQ((T = A, T <<= 16), U128(UINT64_C(0xffffffffffff36a4), UINT64_C(0x95f9c66cc79f0000)));
  EXPECT_EQ(ror(A, 16), U128(UINT64_C(0xc79fffffffffffff), UINT64_C(0xffff36a495f9c66c)));
  EXPECT_EQ(rol(A, 16), U128(UINT64_C(0xffffffffffff36a4), UINT64_C(0x95f9c66cc79fffff)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x36a495f9c66cc79f)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x36a495f9c66cc7a0)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x36a495f9c66cc79f)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x36a495f9c66cc79e)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x36a495f9c66cc7a0)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x36a495f9c66cc7a0)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x36a495f9c66cc79e)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x36a495f9c66cc79e)));
}

TEST(u128, autogen_basic_14) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xa2d937a7c1738fe9));
  const U128 B = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x27552d5d33197942));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(-INT64_C(3878051157162260181)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x0000000000000001), UINT64_C(0x7b840a4a8e5a16a7)));
  EXPECT_EQ(A ^ B, U128(-INT64_C(8823647904814401877)));
  EXPECT_EQ(A | B, U128(-INT64_C(6350849530988331029)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x2251250501110940)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x762c0ecdbfeb75c4), UINT64_C(0x60deca48f7913b12)));
  EXPECT_EQ(-A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x5d26c8583e8c7017)));
  EXPECT_EQ(~A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x5d26c8583e8c7016)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0xa2d937a7c1738fe9)));
  EXPECT_EQ(A >> 66, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 66, U128(UINT64_C(0x8b64de9f05ce3fa4), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(-INT64_C(3878051157162260181)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x0000000000000001), UINT64_C(0x7b840a4a8e5a16a7)));
  EXPECT_EQ((T = A, T ^= B), U128(-INT64_C(8823647904814401877)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(6350849530988331029)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x2251250501110940)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x762c0ecdbfeb75c4), UINT64_C(0x60deca48f7913b12)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0xa2d937a7c1738fe9)));
  EXPECT_EQ((T = A, T >>= 66), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 66), U128(UINT64_C(0x8b64de9f05ce3fa4), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 66), U128(UINT64_C(0x28b64de9f05ce3fa), UINT64_C(0x4000000000000000)));
  EXPECT_EQ(rol(A, 66), U128(UINT64_C(0x8b64de9f05ce3fa4), UINT64_C(0x0000000000000002)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xa2d937a7c1738fe9)));
  EXPECT_EQ(T, U128(UINT64_C(0xa2d937a7c1738fea)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xa2d937a7c1738fe9)));
  EXPECT_EQ(T, U128(UINT64_C(0xa2d937a7c1738fe8)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xa2d937a7c1738fea)));
  EXPECT_EQ(T, U128(UINT64_C(0xa2d937a7c1738fea)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xa2d937a7c1738fe8)));
  EXPECT_EQ(T, U128(UINT64_C(0xa2d937a7c1738fe8)));
}
#ifndef ERTHINK_NATIVE_U128_TYPE

TEST(u128, autogen_basic_15) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xf2d9e00afb4fdd43));
  const U128 B = U128(UINT64_C(0x7015c3e53bb96444));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x0000000000000001), UINT64_C(0x62efa3f037094187)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x82c41c25bf9678ff)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x82cc23efc0f6b907)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xf2dde3effbfffd47)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x7011c0003b094440)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x6a53f7b99a0f6ace), UINT64_C(0x27b8c7ba4a0ff1cc)));
  EXPECT_EQ(-A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d261ff504b022bd)));
  EXPECT_EQ(~A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d261ff504b022bc)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000002)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x12ae584083dd14bb)));
  EXPECT_EQ(A >> 68, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 68, U128(UINT64_C(0x2d9e00afb4fdd430), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x0000000000000001), UINT64_C(0x62efa3f037094187)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x82c41c25bf9678ff)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x82cc23efc0f6b907)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xf2dde3effbfffd47)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x7011c0003b094440)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x6a53f7b99a0f6ace), UINT64_C(0x27b8c7ba4a0ff1cc)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000002)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x12ae584083dd14bb)));
  EXPECT_EQ((T = A, T >>= 68), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 68), U128(UINT64_C(0x2d9e00afb4fdd430), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 68), U128(UINT64_C(0x0f2d9e00afb4fdd4), UINT64_C(0x3000000000000000)));
  EXPECT_EQ(rol(A, 68), U128(UINT64_C(0x2d9e00afb4fdd430), UINT64_C(0x000000000000000f)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xf2d9e00afb4fdd43)));
  EXPECT_EQ(T, U128(UINT64_C(0xf2d9e00afb4fdd44)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xf2d9e00afb4fdd43)));
  EXPECT_EQ(T, U128(UINT64_C(0xf2d9e00afb4fdd42)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xf2d9e00afb4fdd44)));
  EXPECT_EQ(T, U128(UINT64_C(0xf2d9e00afb4fdd44)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xf2d9e00afb4fdd42)));
  EXPECT_EQ(T, U128(UINT64_C(0xf2d9e00afb4fdd42)));
}

TEST(u128, autogen_basic_16) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x57a1c1c5145e162d), UINT64_C(0xc23fe37f7d22ba38));
  const U128 B = U128(UINT64_C(0xd9980c0c6f34a316));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x57a1c1c5145e162e), UINT64_C(0x9bd7ef8bec575d4e)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x57a1c1c5145e162c), UINT64_C(0xe8a7d7730dee1722)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x57a1c1c5145e162d), UINT64_C(0x1ba7ef731216192e)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x57a1c1c5145e162d), UINT64_C(0xdbbfef7f7f36bb3e)));
  EXPECT_EQ(A & B, U128(UINT64_C(0xc018000c6d20a210)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xa86abea83f27938b), UINT64_C(0x641a8e0df8eda8d0)));
  EXPECT_EQ(-A, U128(UINT64_C(0xa85e3e3aeba1e9d2), UINT64_C(0x3dc01c8082dd45c8)));
  EXPECT_EQ(~A, U128(UINT64_C(0xa85e3e3aeba1e9d2), UINT64_C(0x3dc01c8082dd45c7)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x67196416f31c093b)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x3f7cf04549dd5e26)));
  EXPECT_EQ(A >> 22, U128(UINT64_C(0x0000015e87071451), UINT64_C(0x7858b708ff8dfdf4)));
  EXPECT_EQ(A << 22, U128(UINT64_C(0x714517858b708ff8), UINT64_C(0xdfdf48ae8e000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x57a1c1c5145e162e), UINT64_C(0x9bd7ef8bec575d4e)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x57a1c1c5145e162c), UINT64_C(0xe8a7d7730dee1722)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x57a1c1c5145e162d), UINT64_C(0x1ba7ef731216192e)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x57a1c1c5145e162d), UINT64_C(0xdbbfef7f7f36bb3e)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0xc018000c6d20a210)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xa86abea83f27938b), UINT64_C(0x641a8e0df8eda8d0)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x67196416f31c093b)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x3f7cf04549dd5e26)));
  EXPECT_EQ((T = A, T >>= 22), U128(UINT64_C(0x0000015e87071451), UINT64_C(0x7858b708ff8dfdf4)));
  EXPECT_EQ((T = A, T <<= 22), U128(UINT64_C(0x714517858b708ff8), UINT64_C(0xdfdf48ae8e000000)));
  EXPECT_EQ(ror(A, 22), U128(UINT64_C(0x8ae8e15e87071451), UINT64_C(0x7858b708ff8dfdf4)));
  EXPECT_EQ(rol(A, 22), U128(UINT64_C(0x714517858b708ff8), UINT64_C(0xdfdf48ae8e15e870)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x57a1c1c5145e162d), UINT64_C(0xc23fe37f7d22ba38)));
  EXPECT_EQ(T, U128(UINT64_C(0x57a1c1c5145e162d), UINT64_C(0xc23fe37f7d22ba39)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x57a1c1c5145e162d), UINT64_C(0xc23fe37f7d22ba38)));
  EXPECT_EQ(T, U128(UINT64_C(0x57a1c1c5145e162d), UINT64_C(0xc23fe37f7d22ba37)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x57a1c1c5145e162d), UINT64_C(0xc23fe37f7d22ba39)));
  EXPECT_EQ(T, U128(UINT64_C(0x57a1c1c5145e162d), UINT64_C(0xc23fe37f7d22ba39)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x57a1c1c5145e162d), UINT64_C(0xc23fe37f7d22ba37)));
  EXPECT_EQ(T, U128(UINT64_C(0x57a1c1c5145e162d), UINT64_C(0xc23fe37f7d22ba37)));
}

TEST(u128, autogen_basic_17) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x20a1d49037df78b1));
  const U128 B = U128(UINT64_C(0x71c6f853337c0527), UINT64_C(0x4ff3453b1e75c22a));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x71c6f853337c0527), UINT64_C(0x709519cb56553adb)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x8e3907accc83fad8), UINT64_C(0xd0ae8f551969b687)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x71c6f853337c0527), UINT64_C(0x6f5291ab29aaba9b)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x71c6f853337c0527), UINT64_C(0x6ff3d5bb3ffffabb)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x00a1441016554020)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xf14154c506bead40), UINT64_C(0x552369126b04ef0a)));
  EXPECT_EQ(-A, U128(-INT64_C(2351394196341881009)));
  EXPECT_EQ(~A, U128(-INT64_C(2351394196341881010)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x20a1d49037df78b1)));
  EXPECT_EQ(A >> 42, U128(UINT64_C(0x0000000000082875)));
  EXPECT_EQ(A << 42, U128(UINT64_C(0x00000082875240df), UINT64_C(0x7de2c40000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x71c6f853337c0527), UINT64_C(0x709519cb56553adb)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x8e3907accc83fad8), UINT64_C(0xd0ae8f551969b687)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x71c6f853337c0527), UINT64_C(0x6f5291ab29aaba9b)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x71c6f853337c0527), UINT64_C(0x6ff3d5bb3ffffabb)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x00a1441016554020)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xf14154c506bead40), UINT64_C(0x552369126b04ef0a)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x20a1d49037df78b1)));
  EXPECT_EQ((T = A, T >>= 42), U128(UINT64_C(0x0000000000082875)));
  EXPECT_EQ((T = A, T <<= 42), U128(UINT64_C(0x00000082875240df), UINT64_C(0x7de2c40000000000)));
  EXPECT_EQ(ror(A, 42), U128(UINT64_C(0x240df7de2c400000), UINT64_C(0x0000000000082875)));
  EXPECT_EQ(rol(A, 42), U128(UINT64_C(0x00000082875240df), UINT64_C(0x7de2c40000000000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x20a1d49037df78b1)));
  EXPECT_EQ(T, U128(UINT64_C(0x20a1d49037df78b2)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x20a1d49037df78b1)));
  EXPECT_EQ(T, U128(UINT64_C(0x20a1d49037df78b0)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x20a1d49037df78b2)));
  EXPECT_EQ(T, U128(UINT64_C(0x20a1d49037df78b2)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x20a1d49037df78b0)));
  EXPECT_EQ(T, U128(UINT64_C(0x20a1d49037df78b0)));
}

TEST(u128, autogen_basic_18) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x13fcfcdc55c1aa7e), UINT64_C(0x9a0bb540c15cfb75));
  const U128 B = U128(UINT64_C(0x7ac42c937194876c), UINT64_C(0x338268657f8de34b));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x8ec1296fc75631ea), UINT64_C(0xcd8e1da640eadec0)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x9938d048e42d2312), UINT64_C(0x66894cdb41cf182a)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x6938d04f24552d12), UINT64_C(0xa989dd25bed1183e)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x7bfcfcdf75d5af7e), UINT64_C(0xbb8bfd65ffddfb7f)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x12c42c905180826c), UINT64_C(0x12022040410ce341)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xe661f7a5aa332dd3), UINT64_C(0x87fee38ca3a76a47)));
  EXPECT_EQ(-A, U128(UINT64_C(0xec030323aa3e5581), UINT64_C(0x65f44abf3ea3048b)));
  EXPECT_EQ(~A, U128(UINT64_C(0xec030323aa3e5581), UINT64_C(0x65f44abf3ea3048a)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x13fcfcdc55c1aa7e), UINT64_C(0x9a0bb540c15cfb75)));
  EXPECT_EQ(A >> 75, U128(UINT64_C(0x00027f9f9b8ab835)));
  EXPECT_EQ(A << 75, U128(UINT64_C(0x5daa060ae7dba800), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x8ec1296fc75631ea), UINT64_C(0xcd8e1da640eadec0)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x9938d048e42d2312), UINT64_C(0x66894cdb41cf182a)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x6938d04f24552d12), UINT64_C(0xa989dd25bed1183e)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x7bfcfcdf75d5af7e), UINT64_C(0xbb8bfd65ffddfb7f)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x12c42c905180826c), UINT64_C(0x12022040410ce341)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xe661f7a5aa332dd3), UINT64_C(0x87fee38ca3a76a47)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x13fcfcdc55c1aa7e), UINT64_C(0x9a0bb540c15cfb75)));
  EXPECT_EQ((T = A, T >>= 75), U128(UINT64_C(0x00027f9f9b8ab835)));
  EXPECT_EQ((T = A, T <<= 75), U128(UINT64_C(0x5daa060ae7dba800), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 75), U128(UINT64_C(0x4fd34176a8182b9f), UINT64_C(0x6ea27f9f9b8ab835)));
  EXPECT_EQ(rol(A, 75), U128(UINT64_C(0x5daa060ae7dba89f), UINT64_C(0xe7e6e2ae0d53f4d0)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x13fcfcdc55c1aa7e), UINT64_C(0x9a0bb540c15cfb75)));
  EXPECT_EQ(T, U128(UINT64_C(0x13fcfcdc55c1aa7e), UINT64_C(0x9a0bb540c15cfb76)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x13fcfcdc55c1aa7e), UINT64_C(0x9a0bb540c15cfb75)));
  EXPECT_EQ(T, U128(UINT64_C(0x13fcfcdc55c1aa7e), UINT64_C(0x9a0bb540c15cfb74)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x13fcfcdc55c1aa7e), UINT64_C(0x9a0bb540c15cfb76)));
  EXPECT_EQ(T, U128(UINT64_C(0x13fcfcdc55c1aa7e), UINT64_C(0x9a0bb540c15cfb76)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x13fcfcdc55c1aa7e), UINT64_C(0x9a0bb540c15cfb74)));
  EXPECT_EQ(T, U128(UINT64_C(0x13fcfcdc55c1aa7e), UINT64_C(0x9a0bb540c15cfb74)));
}

TEST(u128, autogen_basic_19) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x7e75ca64b5a27012), UINT64_C(0xd6bcd1490d082279));
  const U128 B = U128(UINT64_C(0x142055242c97bfe0), UINT64_C(0x22aaa0a343a45baf));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x92961f88e23a2ff2), UINT64_C(0xf96771ec50ac7e28)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x6a557540890ab032), UINT64_C(0xb41230a5c963c6ca)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x6a559f409935cff2), UINT64_C(0xf41671ea4eac79d6)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x7e75df64bdb7fff2), UINT64_C(0xf6bef1eb4fac7bff)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x1420402424823000), UINT64_C(0x02a8800101000229)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x806d9292a7a06175), UINT64_C(0x72c115d88d5493b7)));
  EXPECT_EQ(-A, U128(UINT64_C(0x818a359b4a5d8fed), UINT64_C(0x29432eb6f2f7dd87)));
  EXPECT_EQ(~A, U128(UINT64_C(0x818a359b4a5d8fed), UINT64_C(0x29432eb6f2f7dd86)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000006)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x05b3cb8baa13f0d2), UINT64_C(0x06bd0d75772dfc5f)));
  EXPECT_EQ(A >> 47, U128(UINT64_C(0x000000000000fceb), UINT64_C(0x94c96b44e025ad79)));
  EXPECT_EQ(A << 47, U128(UINT64_C(0x38096b5e68a48684), UINT64_C(0x113c800000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x92961f88e23a2ff2), UINT64_C(0xf96771ec50ac7e28)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x6a557540890ab032), UINT64_C(0xb41230a5c963c6ca)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x6a559f409935cff2), UINT64_C(0xf41671ea4eac79d6)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x7e75df64bdb7fff2), UINT64_C(0xf6bef1eb4fac7bff)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x1420402424823000), UINT64_C(0x02a8800101000229)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x806d9292a7a06175), UINT64_C(0x72c115d88d5493b7)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000006)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x05b3cb8baa13f0d2), UINT64_C(0x06bd0d75772dfc5f)));
  EXPECT_EQ((T = A, T >>= 47), U128(UINT64_C(0x000000000000fceb), UINT64_C(0x94c96b44e025ad79)));
  EXPECT_EQ((T = A, T <<= 47), U128(UINT64_C(0x38096b5e68a48684), UINT64_C(0x113c800000000000)));
  EXPECT_EQ(ror(A, 47), U128(UINT64_C(0xa2921a1044f2fceb), UINT64_C(0x94c96b44e025ad79)));
  EXPECT_EQ(rol(A, 47), U128(UINT64_C(0x38096b5e68a48684), UINT64_C(0x113cbf3ae5325ad1)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x7e75ca64b5a27012), UINT64_C(0xd6bcd1490d082279)));
  EXPECT_EQ(T, U128(UINT64_C(0x7e75ca64b5a27012), UINT64_C(0xd6bcd1490d08227a)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x7e75ca64b5a27012), UINT64_C(0xd6bcd1490d082279)));
  EXPECT_EQ(T, U128(UINT64_C(0x7e75ca64b5a27012), UINT64_C(0xd6bcd1490d082278)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x7e75ca64b5a27012), UINT64_C(0xd6bcd1490d08227a)));
  EXPECT_EQ(T, U128(UINT64_C(0x7e75ca64b5a27012), UINT64_C(0xd6bcd1490d08227a)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x7e75ca64b5a27012), UINT64_C(0xd6bcd1490d082278)));
  EXPECT_EQ(T, U128(UINT64_C(0x7e75ca64b5a27012), UINT64_C(0xd6bcd1490d082278)));
}

TEST(u128, autogen_basic_20) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x0106449e4a1b66e6), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0x89fee60a475c9794), UINT64_C(0x5cb1bf9c9b049253));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x8b052aa89177fe7a), UINT64_C(0x5cb1bf9c9b049253)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x77075e9402becf51), UINT64_C(0xa34e406364fb6dad)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x88f8a2940d47f172), UINT64_C(0x5cb1bf9c9b049253)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x89fee69e4f5ff7f6), UINT64_C(0x5cb1bf9c9b049253)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0106440a42180684), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x3900937885298892), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0xfef9bb61b5e4991a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0xfef9bb61b5e49919), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x0106449e4a1b66e6), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 83, U128(UINT64_C(0x00000020c893c943)));
  EXPECT_EQ(A << 83, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x8b052aa89177fe7a), UINT64_C(0x5cb1bf9c9b049253)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x77075e9402becf51), UINT64_C(0xa34e406364fb6dad)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x88f8a2940d47f172), UINT64_C(0x5cb1bf9c9b049253)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x89fee69e4f5ff7f6), UINT64_C(0x5cb1bf9c9b049253)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0106440a42180684), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x3900937885298892), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x0106449e4a1b66e6), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 83), U128(UINT64_C(0x00000020c893c943)));
  EXPECT_EQ((T = A, T <<= 83), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 83), U128(UINT64_C(0x6cdcc00000000000), UINT64_C(0x00000020c893c943)));
  EXPECT_EQ(rol(A, 83), U128(UINT64_C(0x0000000000000832), UINT64_C(0x24f250db37300000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x0106449e4a1b66e6), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x0106449e4a1b66e6), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x0106449e4a1b66e6), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x0106449e4a1b66e5), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x0106449e4a1b66e6), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0x0106449e4a1b66e6), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x0106449e4a1b66e5), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0x0106449e4a1b66e5), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_21) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb37));
  const U128 B = U128(UINT64_C(0x0ff5a502c222b1bd), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x11912d7b9ed13445), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xf1a5e3761a8bd0cb), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x0e6e2d7a1e8c3335), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x0fffad7adeaeb3bd), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x01918000c0228088), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x5d2cb05def65ae9b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0xfe64778723517d77), UINT64_C(0xfef4bf8d520214c9)));
  EXPECT_EQ(~A, U128(UINT64_C(0xfe64778723517d77), UINT64_C(0xfef4bf8d520214c8)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x11912d7b9ed13445), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xf1a5e3761a8bd0cb), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x0e6e2d7a1e8c3335), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x0fffad7adeaeb3bd), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x01918000c0228088), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x5d2cb05def65ae9b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ(T, U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb38)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb37)));
  EXPECT_EQ(T, U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb36)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb38)));
  EXPECT_EQ(T, U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb38)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb36)));
  EXPECT_EQ(T, U128(UINT64_C(0x019b8878dcae8288), UINT64_C(0x010b4072adfdeb36)));
}

TEST(u128, autogen_basic_22) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x9a51c5961382ad41), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0x54991f41bfbd22fa), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xeeeae4d7d33fd03b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x45b8a65453c58a47), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xcec8dad7ac3f8fbb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xded9dfd7bfbfaffb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x1011050013802040), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0x65ae3a69ec7d52bf), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0x65ae3a69ec7d52be), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x45b8a65453c58a47), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0x9a51c5961382ad41), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0x9a51c5961382ad41), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xeeeae4d7d33fd03b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x45b8a65453c58a47), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xcec8dad7ac3f8fbb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xded9dfd7bfbfaffb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x1011050013802040), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x45b8a65453c58a47), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0x9a51c5961382ad41), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0x9a51c5961382ad41), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0x9a51c5961382ad41), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0x9a51c5961382ad41), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x9a51c5961382ad41), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x9a51c5961382ad41), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x9a51c5961382ad41), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x9a51c5961382ad40), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x9a51c5961382ad41), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0x9a51c5961382ad41), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x9a51c5961382ad40), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0x9a51c5961382ad40), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_23) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x6893d2a69e0e0a5b), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0x783a39795c2834bc));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x6893d2a69e0e0a5b), UINT64_C(0x783a39795c2834bc)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x6893d2a69e0e0a5a), UINT64_C(0x87c5c686a3d7cb44)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x6893d2a69e0e0a5b), UINT64_C(0x783a39795c2834bc)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x6893d2a69e0e0a5b), UINT64_C(0x783a39795c2834bc)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x73bd70643ea216d4), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0x976c2d5961f1f5a5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0x976c2d5961f1f5a4), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0xdead2db3806b0714)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x23a5a65fa8d6bd50)));
  EXPECT_EQ(A >> 60, U128(UINT64_C(0x0000000000000006), UINT64_C(0x893d2a69e0e0a5b0)));
  EXPECT_EQ(A << 60, U128(UINT64_C(0xb000000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x6893d2a69e0e0a5b), UINT64_C(0x783a39795c2834bc)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x6893d2a69e0e0a5a), UINT64_C(0x87c5c686a3d7cb44)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x6893d2a69e0e0a5b), UINT64_C(0x783a39795c2834bc)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x6893d2a69e0e0a5b), UINT64_C(0x783a39795c2834bc)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x73bd70643ea216d4), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0xdead2db3806b0714)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x23a5a65fa8d6bd50)));
  EXPECT_EQ((T = A, T >>= 60), U128(UINT64_C(0x0000000000000006), UINT64_C(0x893d2a69e0e0a5b0)));
  EXPECT_EQ((T = A, T <<= 60), U128(UINT64_C(0xb000000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 60), U128(UINT64_C(0x0000000000000006), UINT64_C(0x893d2a69e0e0a5b0)));
  EXPECT_EQ(rol(A, 60), U128(UINT64_C(0xb000000000000000), UINT64_C(0x06893d2a69e0e0a5)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x6893d2a69e0e0a5b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x6893d2a69e0e0a5b), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x6893d2a69e0e0a5b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x6893d2a69e0e0a5a), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x6893d2a69e0e0a5b), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0x6893d2a69e0e0a5b), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x6893d2a69e0e0a5a), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0x6893d2a69e0e0a5a), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_24) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xaa6c2dff00565905));
  const U128 B = U128(UINT64_C(0x9689e26fc1f9784e), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x9689e26fc1f9784e), UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x69761d903e0687b2), UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x9689e26fc1f9784e), UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x9689e26fc1f9784e), UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x9081fc1eeee67786), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x5593d200ffa9a6fb)));
  EXPECT_EQ(~A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x5593d200ffa9a6fa)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x9689e26fc1f9784e), UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x69761d903e0687b2), UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x9689e26fc1f9784e), UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x9689e26fc1f9784e), UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x9081fc1eeee67786), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ(T, U128(UINT64_C(0xaa6c2dff00565906)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xaa6c2dff00565905)));
  EXPECT_EQ(T, U128(UINT64_C(0xaa6c2dff00565904)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xaa6c2dff00565906)));
  EXPECT_EQ(T, U128(UINT64_C(0xaa6c2dff00565906)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xaa6c2dff00565904)));
  EXPECT_EQ(T, U128(UINT64_C(0xaa6c2dff00565904)));
}

TEST(u128, autogen_basic_25) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7d3f172a96b77ae2));
  const U128 B = U128(UINT64_C(0x6bfb510d28a7a230), UINT64_C(0x8e5ff221ec44d3bf));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x6bfb510d28a7a230), UINT64_C(0x0b9f094c82fc4ea1)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x9404aef2d7585dce), UINT64_C(0xeedf2508aa72a723)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x9404aef2d7585dcf), UINT64_C(0xf360e50b7af3a95d)));
  EXPECT_EQ(A | B, U128(-INT64_C(36038503662355457)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x6bfb510d28a7a230), UINT64_C(0x0c1f1220840452a2)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x8ae30552605b038d), UINT64_C(0xb21a0c26a934f49e)));
  EXPECT_EQ(-A, U128(UINT64_C(0x82c0e8d56948851e)));
  EXPECT_EQ(~A, U128(UINT64_C(0x82c0e8d56948851d)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000002)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x28095de5aeb0bb9e), UINT64_C(0x607f32e6be2dd364)));
  EXPECT_EQ(A >> 63, U128(UINT64_C(0x0000000000000001), UINT64_C(0xfffffffffffffffe)));
  EXPECT_EQ(A << 63, U128(UINT64_C(0xbe9f8b954b5bbd71), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x6bfb510d28a7a230), UINT64_C(0x0b9f094c82fc4ea1)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x9404aef2d7585dce), UINT64_C(0xeedf2508aa72a723)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x9404aef2d7585dcf), UINT64_C(0xf360e50b7af3a95d)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(36038503662355457)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x6bfb510d28a7a230), UINT64_C(0x0c1f1220840452a2)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x8ae30552605b038d), UINT64_C(0xb21a0c26a934f49e)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000002)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x28095de5aeb0bb9e), UINT64_C(0x607f32e6be2dd364)));
  EXPECT_EQ((T = A, T >>= 63), U128(UINT64_C(0x0000000000000001), UINT64_C(0xfffffffffffffffe)));
  EXPECT_EQ((T = A, T <<= 63), U128(UINT64_C(0xbe9f8b954b5bbd71), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 63), U128(UINT64_C(0xfa7e2e552d6ef5c5), UINT64_C(0xfffffffffffffffe)));
  EXPECT_EQ(rol(A, 63), U128(UINT64_C(0xbe9f8b954b5bbd71), UINT64_C(0x7fffffffffffffff)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7d3f172a96b77ae2)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7d3f172a96b77ae3)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7d3f172a96b77ae2)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7d3f172a96b77ae1)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7d3f172a96b77ae3)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7d3f172a96b77ae3)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7d3f172a96b77ae1)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7d3f172a96b77ae1)));
}

TEST(u128, autogen_basic_26) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0x4b18dc4b7de86b63));
  const U128 B = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7604e1c019283909));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x916da6ab3601fee3), UINT64_C(0xc11dbe0b9710a46c)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0xd513fa8b64c0325a)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x6e925954c9fe011b), UINT64_C(0x3d1c3d8b64c0526a)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7f1cfdcb7de87b6b)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0x4200c04019282901)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x7799341b6266342a), UINT64_C(0xfc4279bd9f8cd17b)));
  EXPECT_EQ(-A, U128(UINT64_C(0x6e925954c9fe011b), UINT64_C(0xb4e723b48217949d)));
  EXPECT_EQ(~A, U128(UINT64_C(0x6e925954c9fe011b), UINT64_C(0xb4e723b48217949c)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0x4b18dc4b7de86b63)));
  EXPECT_EQ(A >> 9, U128(UINT64_C(0x0048b6d3559b00ff), UINT64_C(0x72258c6e25bef435)));
  EXPECT_EQ(A << 9, U128(UINT64_C(0xdb4d566c03fdc896), UINT64_C(0x31b896fbd0d6c600)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x916da6ab3601fee3), UINT64_C(0xc11dbe0b9710a46c)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0xd513fa8b64c0325a)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x6e925954c9fe011b), UINT64_C(0x3d1c3d8b64c0526a)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7f1cfdcb7de87b6b)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0x4200c04019282901)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x7799341b6266342a), UINT64_C(0xfc4279bd9f8cd17b)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0x4b18dc4b7de86b63)));
  EXPECT_EQ((T = A, T >>= 9), U128(UINT64_C(0x0048b6d3559b00ff), UINT64_C(0x72258c6e25bef435)));
  EXPECT_EQ((T = A, T <<= 9), U128(UINT64_C(0xdb4d566c03fdc896), UINT64_C(0x31b896fbd0d6c600)));
  EXPECT_EQ(ror(A, 9), U128(UINT64_C(0xb1c8b6d3559b00ff), UINT64_C(0x72258c6e25bef435)));
  EXPECT_EQ(rol(A, 9), U128(UINT64_C(0xdb4d566c03fdc896), UINT64_C(0x31b896fbd0d6c722)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0x4b18dc4b7de86b63)));
  EXPECT_EQ(T, U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0x4b18dc4b7de86b64)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0x4b18dc4b7de86b63)));
  EXPECT_EQ(T, U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0x4b18dc4b7de86b62)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0x4b18dc4b7de86b64)));
  EXPECT_EQ(T, U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0x4b18dc4b7de86b64)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0x4b18dc4b7de86b62)));
  EXPECT_EQ(T, U128(UINT64_C(0x916da6ab3601fee4), UINT64_C(0x4b18dc4b7de86b62)));
}

TEST(u128, autogen_basic_27) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x58c56cc28d23114d));
  const U128 B = U128(-INT64_C(1691333891993403722));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x414c998bd84a9003)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x703e3ff941fb9297)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xb042400bc6046ffb)));
  EXPECT_EQ(A | B, U128(-INT64_C(520327609328369665)));
  EXPECT_EQ(A & B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x48852cc009231004)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x0f5530a88df9030c), UINT64_C(0x97fcaba5cb2d32be)));
  EXPECT_EQ(-A, U128(UINT64_C(0xa73a933d72dceeb3)));
  EXPECT_EQ(~A, U128(UINT64_C(0xa73a933d72dceeb2)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x58c56cc28d23114d)));
  EXPECT_EQ(A >> 54, U128(UINT64_C(0x00000000000003ff), UINT64_C(0xfffffffffffffd63)));
  EXPECT_EQ(A << 54, U128(UINT64_C(0xffd6315b30a348c4), UINT64_C(0x5340000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x414c998bd84a9003)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x703e3ff941fb9297)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xb042400bc6046ffb)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(520327609328369665)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x48852cc009231004)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x0f5530a88df9030c), UINT64_C(0x97fcaba5cb2d32be)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x58c56cc28d23114d)));
  EXPECT_EQ((T = A, T >>= 54), U128(UINT64_C(0x00000000000003ff), UINT64_C(0xfffffffffffffd63)));
  EXPECT_EQ((T = A, T <<= 54), U128(UINT64_C(0xffd6315b30a348c4), UINT64_C(0x5340000000000000)));
  EXPECT_EQ(ror(A, 54), U128(UINT64_C(0x15b30a348c4537ff), UINT64_C(0xfffffffffffffd63)));
  EXPECT_EQ(rol(A, 54), U128(UINT64_C(0xffd6315b30a348c4), UINT64_C(0x537fffffffffffff)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x58c56cc28d23114d)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x58c56cc28d23114e)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x58c56cc28d23114d)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x58c56cc28d23114c)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x58c56cc28d23114e)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x58c56cc28d23114e)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x58c56cc28d23114c)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x58c56cc28d23114c)));
}

TEST(u128, autogen_basic_28) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(-INT64_C(6234097997511576249));
  const U128 B = U128(UINT64_C(0xdbd51acb19f7bed8));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x855123b1bd50f41f)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xfffffffffffffffe), UINT64_C(0xcda6ee1b8961766f)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x72a9122dbaae8b9f)));
  EXPECT_EQ(A | B, U128(-INT64_C(289045184128237601)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x895408c201513440)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xb5b516c2ab1f1853), UINT64_C(0xd3f776695f50a5e8)));
  EXPECT_EQ(-A, U128(UINT64_C(0x5683f7195ca6cab9)));
  EXPECT_EQ(~A, U128(UINT64_C(0x5683f7195ca6cab8)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001), UINT64_C(0x2a1e330cca3660af)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x2f7b9d5a49dcbf9f)));
  EXPECT_EQ(A >> 88, U128(UINT64_C(0x000000ffffffffff)));
  EXPECT_EQ(A << 88, U128(UINT64_C(0xe6a3593547000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x855123b1bd50f41f)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xfffffffffffffffe), UINT64_C(0xcda6ee1b8961766f)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x72a9122dbaae8b9f)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(289045184128237601)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x895408c201513440)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xb5b516c2ab1f1853), UINT64_C(0xd3f776695f50a5e8)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001), UINT64_C(0x2a1e330cca3660af)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x2f7b9d5a49dcbf9f)));
  EXPECT_EQ((T = A, T >>= 88), U128(UINT64_C(0x000000ffffffffff)));
  EXPECT_EQ((T = A, T <<= 88), U128(UINT64_C(0xe6a3593547000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 88), U128(UINT64_C(0xffffffa97c08e6a3), UINT64_C(0x593547ffffffffff)));
  EXPECT_EQ(rol(A, 88), U128(UINT64_C(0xe6a3593547ffffff), UINT64_C(0xffffffffffa97c08)));
  EXPECT_EQ((T = A, T++), U128(-INT64_C(6234097997511576249)));
  EXPECT_EQ(T, U128(-INT64_C(6234097997511576248)));
  EXPECT_EQ((T = A, T--), U128(-INT64_C(6234097997511576249)));
  EXPECT_EQ(T, U128(-INT64_C(6234097997511576250)));
  EXPECT_EQ((T = A, ++T), U128(-INT64_C(6234097997511576248)));
  EXPECT_EQ(T, U128(-INT64_C(6234097997511576248)));
  EXPECT_EQ((T = A, --T), U128(-INT64_C(6234097997511576250)));
  EXPECT_EQ(T, U128(-INT64_C(6234097997511576250)));
}

TEST(u128, autogen_basic_29) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x00d85b578395e5d1));
  const U128 B = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x0ee60f4b05d717ca));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x0fbe6aa2896cfd9b)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xf1f24c0c7dbece07)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x0e3e541c8642f21b)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x0efe5f5f87d7f7db)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x00c00b43019505c0)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xff343c1642fe5857), UINT64_C(0xc425f37c63741dea)));
  EXPECT_EQ(-A, U128(-INT64_C(60899026397423057)));
  EXPECT_EQ(~A, U128(-INT64_C(60899026397423058)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x00d85b578395e5d1)));
  EXPECT_EQ(A >> 74, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 74, U128(UINT64_C(0x616d5e0e57974400), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x0fbe6aa2896cfd9b)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xf1f24c0c7dbece07)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x0e3e541c8642f21b)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x0efe5f5f87d7f7db)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x00c00b43019505c0)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xff343c1642fe5857), UINT64_C(0xc425f37c63741dea)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x00d85b578395e5d1)));
  EXPECT_EQ((T = A, T >>= 74), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 74), U128(UINT64_C(0x616d5e0e57974400), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 74), U128(UINT64_C(0x00003616d5e0e579), UINT64_C(0x7440000000000000)));
  EXPECT_EQ(rol(A, 74), U128(UINT64_C(0x616d5e0e57974400), UINT64_C(0x0000000000000003)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x00d85b578395e5d1)));
  EXPECT_EQ(T, U128(UINT64_C(0x00d85b578395e5d2)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x00d85b578395e5d1)));
  EXPECT_EQ(T, U128(UINT64_C(0x00d85b578395e5d0)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x00d85b578395e5d2)));
  EXPECT_EQ(T, U128(UINT64_C(0x00d85b578395e5d2)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x00d85b578395e5d0)));
  EXPECT_EQ(T, U128(UINT64_C(0x00d85b578395e5d0)));
}

TEST(u128, autogen_basic_30) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xe7f2d187c535d56b));
  const U128 B = U128(UINT64_C(0x43e3a45e4468960c));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x0000000000000001), UINT64_C(0x2bd675e6099e6b77)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xa40f2d2980cd3f5f)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xa41175d9815d4367)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xe7f3f5dfc57dd76f)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x43e2800644209408)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x3d82ce134b602208), UINT64_C(0x7b0fb3c3e90ab304)));
  EXPECT_EQ(-A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x180d2e783aca2a95)));
  EXPECT_EQ(~A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x180d2e783aca2a94)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000003)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x1c47e46cf7fc1347)));
  EXPECT_EQ(A >> 12, U128(UINT64_C(0x000e7f2d187c535d)));
  EXPECT_EQ(A << 12, U128(UINT64_C(0x0000000000000e7f), UINT64_C(0x2d187c535d56b000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x0000000000000001), UINT64_C(0x2bd675e6099e6b77)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xa40f2d2980cd3f5f)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xa41175d9815d4367)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xe7f3f5dfc57dd76f)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x43e2800644209408)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x3d82ce134b602208), UINT64_C(0x7b0fb3c3e90ab304)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000003)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x1c47e46cf7fc1347)));
  EXPECT_EQ((T = A, T >>= 12), U128(UINT64_C(0x000e7f2d187c535d)));
  EXPECT_EQ((T = A, T <<= 12), U128(UINT64_C(0x0000000000000e7f), UINT64_C(0x2d187c535d56b000)));
  EXPECT_EQ(ror(A, 12), U128(UINT64_C(0x56b0000000000000), UINT64_C(0x000e7f2d187c535d)));
  EXPECT_EQ(rol(A, 12), U128(UINT64_C(0x0000000000000e7f), UINT64_C(0x2d187c535d56b000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xe7f2d187c535d56b)));
  EXPECT_EQ(T, U128(UINT64_C(0xe7f2d187c535d56c)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xe7f2d187c535d56b)));
  EXPECT_EQ(T, U128(UINT64_C(0xe7f2d187c535d56a)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xe7f2d187c535d56c)));
  EXPECT_EQ(T, U128(UINT64_C(0xe7f2d187c535d56c)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xe7f2d187c535d56a)));
  EXPECT_EQ(T, U128(UINT64_C(0xe7f2d187c535d56a)));
}

TEST(u128, autogen_basic_31) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0x1227dcbb52c77880));
  const U128 B = U128(UINT64_C(0xdaf3eeb252051a1e));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0xed1bcb6da4cc929e)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x4dbc578705b7fa94), UINT64_C(0x3733ee0900c25e62)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0xc8d4320900c2629e)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0xdaf7febb52c77a9e)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x1223ccb252051800)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x04470398b8f7b1f4), UINT64_C(0xdf7c2fda501d1f00)));
  EXPECT_EQ(-A, U128(UINT64_C(0xb243a878fa48056a), UINT64_C(0xedd82344ad388780)));
  EXPECT_EQ(~A, U128(UINT64_C(0xb243a878fa48056a), UINT64_C(0xedd82344ad38877f)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x5ae382252f1cc90b)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x2418adfb6dc5cb36)));
  EXPECT_EQ(A >> 30, U128(UINT64_C(0x0000000136f15e1c), UINT64_C(0x16dfea54489f72ed)));
  EXPECT_EQ(A << 30, U128(UINT64_C(0xc16dfea54489f72e), UINT64_C(0xd4b1de2000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0xed1bcb6da4cc929e)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x4dbc578705b7fa94), UINT64_C(0x3733ee0900c25e62)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0xc8d4320900c2629e)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0xdaf7febb52c77a9e)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x1223ccb252051800)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x04470398b8f7b1f4), UINT64_C(0xdf7c2fda501d1f00)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x5ae382252f1cc90b)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x2418adfb6dc5cb36)));
  EXPECT_EQ((T = A, T >>= 30), U128(UINT64_C(0x0000000136f15e1c), UINT64_C(0x16dfea54489f72ed)));
  EXPECT_EQ((T = A, T <<= 30), U128(UINT64_C(0xc16dfea54489f72e), UINT64_C(0xd4b1de2000000000)));
  EXPECT_EQ(ror(A, 30), U128(UINT64_C(0x4b1de20136f15e1c), UINT64_C(0x16dfea54489f72ed)));
  EXPECT_EQ(rol(A, 30), U128(UINT64_C(0xc16dfea54489f72e), UINT64_C(0xd4b1de20136f15e1)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0x1227dcbb52c77880)));
  EXPECT_EQ(T, U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0x1227dcbb52c77881)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0x1227dcbb52c77880)));
  EXPECT_EQ(T, U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0x1227dcbb52c7787f)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0x1227dcbb52c77881)));
  EXPECT_EQ(T, U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0x1227dcbb52c77881)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0x1227dcbb52c7787f)));
  EXPECT_EQ(T, U128(UINT64_C(0x4dbc578705b7fa95), UINT64_C(0x1227dcbb52c7787f)));
}

TEST(u128, autogen_basic_32) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x8b4b8e14fcacd399));
  const U128 B = U128(UINT64_C(0xed8ccadc9bbf2fcf), UINT64_C(0x21b7b165783599b2));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xed8ccadc9bbf2fcf), UINT64_C(0xad033f7a74e26d4b)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x127335236440d031), UINT64_C(0x6993dcaf847739e7)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xed8ccadc9bbf2fcf), UINT64_C(0xaafc3f7184994a2b)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xed8ccadc9bbf2fcf), UINT64_C(0xabffbf75fcbddbbb)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0103800478249190)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x2a5428c145c63c63), UINT64_C(0x6d17ecef814e9162)));
  EXPECT_EQ(-A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x74b471eb03532c67)));
  EXPECT_EQ(~A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x74b471eb03532c66)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x8b4b8e14fcacd399)));
  EXPECT_EQ(A >> 50, U128(UINT64_C(0x00000000000022d2)));
  EXPECT_EQ(A << 50, U128(UINT64_C(0x00022d2e3853f2b3), UINT64_C(0x4e64000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xed8ccadc9bbf2fcf), UINT64_C(0xad033f7a74e26d4b)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x127335236440d031), UINT64_C(0x6993dcaf847739e7)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xed8ccadc9bbf2fcf), UINT64_C(0xaafc3f7184994a2b)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xed8ccadc9bbf2fcf), UINT64_C(0xabffbf75fcbddbbb)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0103800478249190)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x2a5428c145c63c63), UINT64_C(0x6d17ecef814e9162)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x8b4b8e14fcacd399)));
  EXPECT_EQ((T = A, T >>= 50), U128(UINT64_C(0x00000000000022d2)));
  EXPECT_EQ((T = A, T <<= 50), U128(UINT64_C(0x00022d2e3853f2b3), UINT64_C(0x4e64000000000000)));
  EXPECT_EQ(ror(A, 50), U128(UINT64_C(0xe3853f2b34e64000), UINT64_C(0x00000000000022d2)));
  EXPECT_EQ(rol(A, 50), U128(UINT64_C(0x00022d2e3853f2b3), UINT64_C(0x4e64000000000000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x8b4b8e14fcacd399)));
  EXPECT_EQ(T, U128(UINT64_C(0x8b4b8e14fcacd39a)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x8b4b8e14fcacd399)));
  EXPECT_EQ(T, U128(UINT64_C(0x8b4b8e14fcacd398)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x8b4b8e14fcacd39a)));
  EXPECT_EQ(T, U128(UINT64_C(0x8b4b8e14fcacd39a)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x8b4b8e14fcacd398)));
  EXPECT_EQ(T, U128(UINT64_C(0x8b4b8e14fcacd398)));
}

TEST(u128, autogen_basic_33) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x5433e83a3805ea86), UINT64_C(0xd4d67e2507c834dd));
  const U128 B = U128(UINT64_C(0xa87c43d6b2ce9a34), UINT64_C(0x944efe1c147c6873));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xfcb02c10ead484bb), UINT64_C(0x69257c411c449d50)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xabb7a46385375052), UINT64_C(0x40878008f34bcc6a)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xfc4fabec8acb70b2), UINT64_C(0x4098803913b45cae)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xfc7febfebacffab6), UINT64_C(0xd4defe3d17fc7cff)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0030401230048a04), UINT64_C(0x94467e0404482051)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x689c401bdc935102), UINT64_C(0x1bd42d12b3758747)));
  EXPECT_EQ(-A, U128(UINT64_C(0xabcc17c5c7fa1579), UINT64_C(0x2b2981daf837cb23)));
  EXPECT_EQ(~A, U128(UINT64_C(0xabcc17c5c7fa1579), UINT64_C(0x2b2981daf837cb22)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x5433e83a3805ea86), UINT64_C(0xd4d67e2507c834dd)));
  EXPECT_EQ(A >> 115, U128(UINT64_C(0x0000000000000a86)));
  EXPECT_EQ(A << 115, U128(UINT64_C(0xa6e8000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xfcb02c10ead484bb), UINT64_C(0x69257c411c449d50)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xabb7a46385375052), UINT64_C(0x40878008f34bcc6a)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xfc4fabec8acb70b2), UINT64_C(0x4098803913b45cae)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xfc7febfebacffab6), UINT64_C(0xd4defe3d17fc7cff)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0030401230048a04), UINT64_C(0x94467e0404482051)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x689c401bdc935102), UINT64_C(0x1bd42d12b3758747)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x5433e83a3805ea86), UINT64_C(0xd4d67e2507c834dd)));
  EXPECT_EQ((T = A, T >>= 115), U128(UINT64_C(0x0000000000000a86)));
  EXPECT_EQ((T = A, T <<= 115), U128(UINT64_C(0xa6e8000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 115), U128(UINT64_C(0x7d074700bd50da9a), UINT64_C(0xcfc4a0f9069baa86)));
  EXPECT_EQ(rol(A, 115), U128(UINT64_C(0xa6eaa19f41d1c02f), UINT64_C(0x5436a6b3f1283e41)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x5433e83a3805ea86), UINT64_C(0xd4d67e2507c834dd)));
  EXPECT_EQ(T, U128(UINT64_C(0x5433e83a3805ea86), UINT64_C(0xd4d67e2507c834de)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x5433e83a3805ea86), UINT64_C(0xd4d67e2507c834dd)));
  EXPECT_EQ(T, U128(UINT64_C(0x5433e83a3805ea86), UINT64_C(0xd4d67e2507c834dc)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x5433e83a3805ea86), UINT64_C(0xd4d67e2507c834de)));
  EXPECT_EQ(T, U128(UINT64_C(0x5433e83a3805ea86), UINT64_C(0xd4d67e2507c834de)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x5433e83a3805ea86), UINT64_C(0xd4d67e2507c834dc)));
  EXPECT_EQ(T, U128(UINT64_C(0x5433e83a3805ea86), UINT64_C(0xd4d67e2507c834dc)));
}

TEST(u128, autogen_basic_34) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x13135f907740a09a), UINT64_C(0xdd7b8e6a2f122261));
  const U128 B = U128(UINT64_C(0x32abecef08736f28), UINT64_C(0x924f90ec4a1ee357));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x45bf4c7f7fb40fc3), UINT64_C(0x6fcb1f56793105b8)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xe06772a16ecd3172), UINT64_C(0x4b2bfd7de4f33f0a)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x21b8b37f7f33cfb2), UINT64_C(0x4f341e86650cc136)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x33bbffff7f73efba), UINT64_C(0xdf7f9eee6f1ee377)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x12034c8000402008), UINT64_C(0x904b80680a122241)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xd663bd514c7be364), UINT64_C(0xbc4f914f2503b1f7)));
  EXPECT_EQ(-A, U128(UINT64_C(0xececa06f88bf5f65), UINT64_C(0x22847195d0eddd9f)));
  EXPECT_EQ(~A, U128(UINT64_C(0xececa06f88bf5f65), UINT64_C(0x22847195d0eddd9e)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x13135f907740a09a), UINT64_C(0xdd7b8e6a2f122261)));
  EXPECT_EQ(A >> 87, U128(UINT64_C(0x0000002626bf20ee)));
  EXPECT_EQ(A << 87, U128(UINT64_C(0x3517891130800000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x45bf4c7f7fb40fc3), UINT64_C(0x6fcb1f56793105b8)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xe06772a16ecd3172), UINT64_C(0x4b2bfd7de4f33f0a)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x21b8b37f7f33cfb2), UINT64_C(0x4f341e86650cc136)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x33bbffff7f73efba), UINT64_C(0xdf7f9eee6f1ee377)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x12034c8000402008), UINT64_C(0x904b80680a122241)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xd663bd514c7be364), UINT64_C(0xbc4f914f2503b1f7)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x13135f907740a09a), UINT64_C(0xdd7b8e6a2f122261)));
  EXPECT_EQ((T = A, T >>= 87), U128(UINT64_C(0x0000002626bf20ee)));
  EXPECT_EQ((T = A, T <<= 87), U128(UINT64_C(0x3517891130800000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 87), U128(UINT64_C(0x814135baf71cd45e), UINT64_C(0x2444c22626bf20ee)));
  EXPECT_EQ(rol(A, 87), U128(UINT64_C(0x35178911308989af), UINT64_C(0xc83ba0504d6ebdc7)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x13135f907740a09a), UINT64_C(0xdd7b8e6a2f122261)));
  EXPECT_EQ(T, U128(UINT64_C(0x13135f907740a09a), UINT64_C(0xdd7b8e6a2f122262)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x13135f907740a09a), UINT64_C(0xdd7b8e6a2f122261)));
  EXPECT_EQ(T, U128(UINT64_C(0x13135f907740a09a), UINT64_C(0xdd7b8e6a2f122260)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x13135f907740a09a), UINT64_C(0xdd7b8e6a2f122262)));
  EXPECT_EQ(T, U128(UINT64_C(0x13135f907740a09a), UINT64_C(0xdd7b8e6a2f122262)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x13135f907740a09a), UINT64_C(0xdd7b8e6a2f122260)));
  EXPECT_EQ(T, U128(UINT64_C(0x13135f907740a09a), UINT64_C(0xdd7b8e6a2f122260)));
}

TEST(u128, autogen_basic_35) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xad47eef0ba318fee), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0x7fd078530b1aab5c), UINT64_C(0xde1d052b32a6447b));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x2d186743c54c3b4a), UINT64_C(0xde1d052b32a6447b)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x2d77769daf16e491), UINT64_C(0x21e2fad4cd59bb85)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xd29796a3b12b24b2), UINT64_C(0xde1d052b32a6447b)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xffd7fef3bb3baffe), UINT64_C(0xde1d052b32a6447b)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x2d4068500a108b4c), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x4196fc58705f5f5a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0x52b8110f45ce7012), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0x52b8110f45ce7011), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x2d77769daf16e491), UINT64_C(0x21e2fad4cd59bb85)));
  EXPECT_EQ(A >> 123, U128(UINT64_C(0x0000000000000015)));
  EXPECT_EQ(A << 123, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x2d186743c54c3b4a), UINT64_C(0xde1d052b32a6447b)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x2d77769daf16e491), UINT64_C(0x21e2fad4cd59bb85)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xd29796a3b12b24b2), UINT64_C(0xde1d052b32a6447b)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xffd7fef3bb3baffe), UINT64_C(0xde1d052b32a6447b)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x2d4068500a108b4c), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x4196fc58705f5f5a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x2d77769daf16e491), UINT64_C(0x21e2fad4cd59bb85)));
  EXPECT_EQ((T = A, T >>= 123), U128(UINT64_C(0x0000000000000015)));
  EXPECT_EQ((T = A, T <<= 123), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 123), U128(UINT64_C(0xa8fdde174631fdc0), UINT64_C(0x0000000000000015)));
  EXPECT_EQ(rol(A, 123), U128(UINT64_C(0x056a3f7785d18c7f), UINT64_C(0x7000000000000000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xad47eef0ba318fee), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0xad47eef0ba318fee), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xad47eef0ba318fee), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0xad47eef0ba318fed), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xad47eef0ba318fee), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0xad47eef0ba318fee), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xad47eef0ba318fed), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0xad47eef0ba318fed), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_36) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fdf));
  const U128 B = U128(UINT64_C(0x14ca2297b60ae025), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x451acf71841722f5), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x1b868a42180162ab), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x249a8e4e7806a2f5), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x34daaedffe0ee2f5), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x1040209186084000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xbe09d05349fd4b3b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0xcfaf532631f3bd2f), UINT64_C(0x98758577183b9021)));
  EXPECT_EQ(~A, U128(UINT64_C(0xcfaf532631f3bd2f), UINT64_C(0x98758577183b9020)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000002)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x06bc67aa61f68286), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x451acf71841722f5), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x1b868a42180162ab), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x249a8e4e7806a2f5), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x34daaedffe0ee2f5), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x1040209186084000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xbe09d05349fd4b3b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000002)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x06bc67aa61f68286), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ(T, U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fe0)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fdf)));
  EXPECT_EQ(T, U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fde)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fe0)));
  EXPECT_EQ(T, U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fe0)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fde)));
  EXPECT_EQ(T, U128(UINT64_C(0x3050acd9ce0c42d0), UINT64_C(0x678a7a88e7c46fde)));
}

TEST(u128, autogen_basic_37) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x4fbe679492aef229), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0xf65b5d487939cc82), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x4619c4dd0be8beab), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x59630a4c197525a7), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xb9e53adceb973eab), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xffff7fdcfbbffeab), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x461a45001028c000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0xb041986b6d510dd7), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0xb041986b6d510dd6), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x4fbe679492aef229), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0x4fbe679492aef229), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0x4fbe679492aef229), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x4619c4dd0be8beab), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x59630a4c197525a7), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xb9e53adceb973eab), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xffff7fdcfbbffeab), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x461a45001028c000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x4fbe679492aef229), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0x4fbe679492aef229), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0x4fbe679492aef229), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0x4fbe679492aef229), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0x4fbe679492aef229), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x4fbe679492aef229), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x4fbe679492aef229), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x4fbe679492aef229), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x4fbe679492aef228), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x4fbe679492aef229), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0x4fbe679492aef229), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x4fbe679492aef228), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0x4fbe679492aef228), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_38) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x0299d008ad818983), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0x316e5a4da8276984));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x0299d008ad818983), UINT64_C(0x316e5a4da8276984)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x0299d008ad818982), UINT64_C(0xce91a5b257d8967c)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x0299d008ad818983), UINT64_C(0x316e5a4da8276984)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x0299d008ad818983), UINT64_C(0x316e5a4da8276984)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xb46aaf048326a28c), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0xfd662ff7527e767d), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0xfd662ff7527e767c), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0d78325745873db0)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x29767975c8270140)));
  EXPECT_EQ(A >> 4, U128(UINT64_C(0x00299d008ad81898), UINT64_C(0x3000000000000000)));
  EXPECT_EQ(A << 4, U128(UINT64_C(0x299d008ad8189830), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x0299d008ad818983), UINT64_C(0x316e5a4da8276984)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x0299d008ad818982), UINT64_C(0xce91a5b257d8967c)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x0299d008ad818983), UINT64_C(0x316e5a4da8276984)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x0299d008ad818983), UINT64_C(0x316e5a4da8276984)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xb46aaf048326a28c), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0d78325745873db0)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x29767975c8270140)));
  EXPECT_EQ((T = A, T >>= 4), U128(UINT64_C(0x00299d008ad81898), UINT64_C(0x3000000000000000)));
  EXPECT_EQ((T = A, T <<= 4), U128(UINT64_C(0x299d008ad8189830), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 4), U128(UINT64_C(0x00299d008ad81898), UINT64_C(0x3000000000000000)));
  EXPECT_EQ(rol(A, 4), U128(UINT64_C(0x299d008ad8189830), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x0299d008ad818983), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x0299d008ad818983), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x0299d008ad818983), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x0299d008ad818982), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x0299d008ad818983), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0x0299d008ad818983), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x0299d008ad818982), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0x0299d008ad818982), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_39) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x9c5f5d034cbb1c6d));
  const U128 B = U128(UINT64_C(0x011bd457a7a3aa56), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x011bd457a7a3aa56), UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xfee42ba8585c55aa), UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x011bd457a7a3aa56), UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x011bd457a7a3aa56), UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xaf9547c93c22ee9e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x63a0a2fcb344e393)));
  EXPECT_EQ(~A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x63a0a2fcb344e392)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x011bd457a7a3aa56), UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xfee42ba8585c55aa), UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x011bd457a7a3aa56), UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x011bd457a7a3aa56), UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xaf9547c93c22ee9e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ(T, U128(UINT64_C(0x9c5f5d034cbb1c6e)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x9c5f5d034cbb1c6d)));
  EXPECT_EQ(T, U128(UINT64_C(0x9c5f5d034cbb1c6c)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x9c5f5d034cbb1c6e)));
  EXPECT_EQ(T, U128(UINT64_C(0x9c5f5d034cbb1c6e)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x9c5f5d034cbb1c6c)));
  EXPECT_EQ(T, U128(UINT64_C(0x9c5f5d034cbb1c6c)));
}

TEST(u128, autogen_basic_40) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(-INT64_C(693053583792882326));
  const U128 B = U128(UINT64_C(0x481990a52ed69378), UINT64_C(0x52901d881b1ff567));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x481990a52ed69378), UINT64_C(0x48f1e4f81ad6b2d1)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xb7e66f5ad1296c87), UINT64_C(0xa3d1a9e7e496c803)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xb7e66f5ad1296c87), UINT64_C(0xa4f1dae7e4a9480d)));
  EXPECT_EQ(A | B, U128(-INT64_C(652494249111061137)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x481990a52ed69378), UINT64_C(0x520005081b16b562)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x628102393475c745), UINT64_C(0xb7e74d34e3a2a7a6)));
  EXPECT_EQ(-A, U128(UINT64_C(0x099e389000494296)));
  EXPECT_EQ(~A, U128(UINT64_C(0x099e389000494295)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000003)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x27b34e10737c4596), UINT64_C(0xfeb16ed7ae56dd35)));
  EXPECT_EQ(A >> 103, U128(UINT64_C(0x0000000001ffffff)));
  EXPECT_EQ(A << 103, U128(UINT64_C(0xdb5eb50000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x481990a52ed69378), UINT64_C(0x48f1e4f81ad6b2d1)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xb7e66f5ad1296c87), UINT64_C(0xa3d1a9e7e496c803)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xb7e66f5ad1296c87), UINT64_C(0xa4f1dae7e4a9480d)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(652494249111061137)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x481990a52ed69378), UINT64_C(0x520005081b16b562)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x628102393475c745), UINT64_C(0xb7e74d34e3a2a7a6)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000003)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x27b34e10737c4596), UINT64_C(0xfeb16ed7ae56dd35)));
  EXPECT_EQ((T = A, T >>= 103), U128(UINT64_C(0x0000000001ffffff)));
  EXPECT_EQ((T = A, T <<= 103), U128(UINT64_C(0xdb5eb50000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 103), U128(UINT64_C(0xffffffffffecc38e), UINT64_C(0xdfff6d7ad5ffffff)));
  EXPECT_EQ(rol(A, 103), U128(UINT64_C(0xdb5eb57fffffffff), UINT64_C(0xfffffffb30e3b7ff)));
  EXPECT_EQ((T = A, T++), U128(-INT64_C(693053583792882326)));
  EXPECT_EQ(T, U128(-INT64_C(693053583792882325)));
  EXPECT_EQ((T = A, T--), U128(-INT64_C(693053583792882326)));
  EXPECT_EQ(T, U128(-INT64_C(693053583792882327)));
  EXPECT_EQ((T = A, ++T), U128(-INT64_C(693053583792882325)));
  EXPECT_EQ(T, U128(-INT64_C(693053583792882325)));
  EXPECT_EQ((T = A, --T), U128(-INT64_C(693053583792882327)));
  EXPECT_EQ(T, U128(-INT64_C(693053583792882327)));
}

TEST(u128, autogen_basic_41) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xb632539a0a40578b));
  const U128 B = U128(-INT64_C(5227971888114801935));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0x6da4d6de5370ba7c)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xfebfd055c10ff49a)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x0f31824b07bc8b53), UINT64_C(0x0140d0de4370357a)));
  EXPECT_EQ(A | B, U128(-INT64_C(5227883265721862149)));
  EXPECT_EQ(A & B, U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xb632030008004281)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x16d18f011e53b777), UINT64_C(0x61f952e355259fdb)));
  EXPECT_EQ(-A, U128(UINT64_C(0x0f31824b07bc8b53), UINT64_C(0x49cdac65f5bfa875)));
  EXPECT_EQ(~A, U128(UINT64_C(0x0f31824b07bc8b53), UINT64_C(0x49cdac65f5bfa874)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xb632539a0a40578b)));
  EXPECT_EQ(A >> 113, U128(UINT64_C(0x0000000000007867)));
  EXPECT_EQ(A << 113, U128(UINT64_C(0xaf16000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0x6da4d6de5370ba7c)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xfebfd055c10ff49a)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x0f31824b07bc8b53), UINT64_C(0x0140d0de4370357a)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(5227883265721862149)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xb632030008004281)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x16d18f011e53b777), UINT64_C(0x61f952e355259fdb)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xb632539a0a40578b)));
  EXPECT_EQ((T = A, T >>= 113), U128(UINT64_C(0x0000000000007867)));
  EXPECT_EQ((T = A, T <<= 113), U128(UINT64_C(0xaf16000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 113), U128(UINT64_C(0x3eda7c21ba565b19), UINT64_C(0x29cd05202bc5f867)));
  EXPECT_EQ(rol(A, 113), U128(UINT64_C(0xaf17e19cfb69f086), UINT64_C(0xe9596c64a7341480)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xb632539a0a40578b)));
  EXPECT_EQ(T, U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xb632539a0a40578c)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xb632539a0a40578b)));
  EXPECT_EQ(T, U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xb632539a0a40578a)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xb632539a0a40578c)));
  EXPECT_EQ(T, U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xb632539a0a40578c)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xb632539a0a40578a)));
  EXPECT_EQ(T, U128(UINT64_C(0xf0ce7db4f84374ac), UINT64_C(0xb632539a0a40578a)));
}

TEST(u128, autogen_basic_42) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(-INT64_C(2111336718877062731));
  const U128 B = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x11c58987e80bd9be));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xfffffffffffffffe), UINT64_C(0xf4788ff8ae23e373)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xd0ed7ce8de0c2ff7)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xf3768ff72e13d00b)));
  EXPECT_EQ(A | B, U128(-INT64_C(867066108231034433)));
  EXPECT_EQ(A & B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x00810000c00809b4)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x1b444102ec23a186), UINT64_C(0x4cdaa6e4d8d8a156)));
  EXPECT_EQ(-A, U128(UINT64_C(0x1d4cf98f39e7f64b)));
  EXPECT_EQ(~A, U128(UINT64_C(0x1d4cf98f39e7f64a)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0xd0ed7ce8de0c2ff7)));
  EXPECT_EQ(A >> 62, U128(UINT64_C(0x0000000000000003), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(A << 62, U128(UINT64_C(0xf8acc19c3186026d), UINT64_C(0x4000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xfffffffffffffffe), UINT64_C(0xf4788ff8ae23e373)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xd0ed7ce8de0c2ff7)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xf3768ff72e13d00b)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(867066108231034433)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x00810000c00809b4)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x1b444102ec23a186), UINT64_C(0x4cdaa6e4d8d8a156)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0xd0ed7ce8de0c2ff7)));
  EXPECT_EQ((T = A, T >>= 62), U128(UINT64_C(0x0000000000000003), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, T <<= 62), U128(UINT64_C(0xf8acc19c3186026d), UINT64_C(0x4000000000000000)));
  EXPECT_EQ(ror(A, 62), U128(UINT64_C(0x8acc19c3186026d7), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(rol(A, 62), U128(UINT64_C(0xf8acc19c3186026d), UINT64_C(0x7fffffffffffffff)));
  EXPECT_EQ((T = A, T++), U128(-INT64_C(2111336718877062731)));
  EXPECT_EQ(T, U128(-INT64_C(2111336718877062730)));
  EXPECT_EQ((T = A, T--), U128(-INT64_C(2111336718877062731)));
  EXPECT_EQ(T, U128(-INT64_C(2111336718877062732)));
  EXPECT_EQ((T = A, ++T), U128(-INT64_C(2111336718877062730)));
  EXPECT_EQ(T, U128(-INT64_C(2111336718877062730)));
  EXPECT_EQ((T = A, --T), U128(-INT64_C(2111336718877062732)));
  EXPECT_EQ(T, U128(-INT64_C(2111336718877062732)));
}

TEST(u128, autogen_basic_43) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x373d5c95304593ef));
  const U128 B = U128(UINT64_C(0xfde1374818cb0120));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x351e93dd4910950f)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xfffffffffffffffe), UINT64_C(0x395c254d177a92cf)));
  EXPECT_EQ(A ^ B, U128(-INT64_C(3829066985559387441)));
  EXPECT_EQ(A | B, U128(-INT64_C(703836812504081)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x3521140010410120)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x38e706137488d523), UINT64_C(0x4a44e91904cb6ce0)));
  EXPECT_EQ(-A, U128(UINT64_C(0xc8c2a36acfba6c11)));
  EXPECT_EQ(~A, U128(UINT64_C(0xc8c2a36acfba6c10)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001), UINT64_C(0x0223512ae0934b5d)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x7918fb530fd1cb4f)));
  EXPECT_EQ(A >> 32, U128(UINT64_C(0x00000000ffffffff), UINT64_C(0xffffffff373d5c95)));
  EXPECT_EQ(A << 32, U128(UINT64_C(0xffffffff373d5c95), UINT64_C(0x304593ef00000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x351e93dd4910950f)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xfffffffffffffffe), UINT64_C(0x395c254d177a92cf)));
  EXPECT_EQ((T = A, T ^= B), U128(-INT64_C(3829066985559387441)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(703836812504081)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x3521140010410120)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x38e706137488d523), UINT64_C(0x4a44e91904cb6ce0)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001), UINT64_C(0x0223512ae0934b5d)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x7918fb530fd1cb4f)));
  EXPECT_EQ((T = A, T >>= 32), U128(UINT64_C(0x00000000ffffffff), UINT64_C(0xffffffff373d5c95)));
  EXPECT_EQ((T = A, T <<= 32), U128(UINT64_C(0xffffffff373d5c95), UINT64_C(0x304593ef00000000)));
  EXPECT_EQ(ror(A, 32), U128(UINT64_C(0x304593efffffffff), UINT64_C(0xffffffff373d5c95)));
  EXPECT_EQ(rol(A, 32), U128(UINT64_C(0xffffffff373d5c95), UINT64_C(0x304593efffffffff)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x373d5c95304593ef)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x373d5c95304593f0)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x373d5c95304593ef)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x373d5c95304593ee)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x373d5c95304593f0)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x373d5c95304593f0)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x373d5c95304593ee)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x373d5c95304593ee)));
}

TEST(u128, autogen_basic_44) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xfe87c5290a8794b9));
  const U128 B = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2bc0521806211352));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x2a48174110a8a80b)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x0000000000000001), UINT64_C(0xd2c7731104668167)));
  EXPECT_EQ(A ^ B, U128(-INT64_C(3078325583363012629)));
  EXPECT_EQ(A | B, U128(-INT64_C(15807433613535237)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x2a80400802011010)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x2cf8406818fec97f), UINT64_C(0x03c1ef3bf1505e42)));
  EXPECT_EQ(-A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x01783ad6f5786b47)));
  EXPECT_EQ(~A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x01783ad6f5786b46)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0xfe87c5290a8794b9)));
  EXPECT_EQ(A >> 82, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 82, U128(UINT64_C(0x14a42a1e52e40000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x2a48174110a8a80b)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x0000000000000001), UINT64_C(0xd2c7731104668167)));
  EXPECT_EQ((T = A, T ^= B), U128(-INT64_C(3078325583363012629)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(15807433613535237)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x2a80400802011010)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x2cf8406818fec97f), UINT64_C(0x03c1ef3bf1505e42)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0xfe87c5290a8794b9)));
  EXPECT_EQ((T = A, T >>= 82), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 82), U128(UINT64_C(0x14a42a1e52e40000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 82), U128(UINT64_C(0x00003fa1f14a42a1), UINT64_C(0xe52e400000000000)));
  EXPECT_EQ(rol(A, 82), U128(UINT64_C(0x14a42a1e52e40000), UINT64_C(0x000000000003fa1f)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xfe87c5290a8794b9)));
  EXPECT_EQ(T, U128(UINT64_C(0xfe87c5290a8794ba)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xfe87c5290a8794b9)));
  EXPECT_EQ(T, U128(UINT64_C(0xfe87c5290a8794b8)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xfe87c5290a8794ba)));
  EXPECT_EQ(T, U128(UINT64_C(0xfe87c5290a8794ba)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xfe87c5290a8794b8)));
  EXPECT_EQ(T, U128(UINT64_C(0xfe87c5290a8794b8)));
}

TEST(u128, autogen_basic_45) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x51907aec85f8ce93));
  const U128 B = U128(UINT64_C(0xd6d459848fb16cd4));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x0000000000000001), UINT64_C(0x2864d47115aa3b67)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7abc2167f64761bf)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x874423680a49a247)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xd7d47bec8ff9eed7)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x5090588485b04c90)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x44726eecfae0c77e), UINT64_C(0x23b7cf9ad9d415bc)));
  EXPECT_EQ(-A, U128(-INT64_C(5877332669997043347)));
  EXPECT_EQ(~A, U128(-INT64_C(5877332669997043348)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x51907aec85f8ce93)));
  EXPECT_EQ(A >> 84, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 84, U128(UINT64_C(0xaec85f8ce9300000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x0000000000000001), UINT64_C(0x2864d47115aa3b67)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7abc2167f64761bf)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x874423680a49a247)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xd7d47bec8ff9eed7)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x5090588485b04c90)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x44726eecfae0c77e), UINT64_C(0x23b7cf9ad9d415bc)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x51907aec85f8ce93)));
  EXPECT_EQ((T = A, T >>= 84), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 84), U128(UINT64_C(0xaec85f8ce9300000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 84), U128(UINT64_C(0x0000051907aec85f), UINT64_C(0x8ce9300000000000)));
  EXPECT_EQ(rol(A, 84), U128(UINT64_C(0xaec85f8ce9300000), UINT64_C(0x0000000000051907)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x51907aec85f8ce93)));
  EXPECT_EQ(T, U128(UINT64_C(0x51907aec85f8ce94)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x51907aec85f8ce93)));
  EXPECT_EQ(T, U128(UINT64_C(0x51907aec85f8ce92)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x51907aec85f8ce94)));
  EXPECT_EQ(T, U128(UINT64_C(0x51907aec85f8ce94)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x51907aec85f8ce92)));
  EXPECT_EQ(T, U128(UINT64_C(0x51907aec85f8ce92)));
}

TEST(u128, autogen_basic_46) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0xf0fb246c17162bc8));
  const U128 B = U128(UINT64_C(0x70f9b083d22dbe26));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x72e675b08ee4c7fe), UINT64_C(0x61f4d4efe943e9ee)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0x800173e844e86da2)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0x800294efc53b95ee)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0xf0fbb4efd73fbfee)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x70f9200012042a00)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xa6cd7d5d2a7fa379), UINT64_C(0x6039c755a3f0efb0)));
  EXPECT_EQ(-A, U128(UINT64_C(0x8d198a4f711b3802), UINT64_C(0x0f04db93e8e9d438)));
  EXPECT_EQ(~A, U128(UINT64_C(0x8d198a4f711b3802), UINT64_C(0x0f04db93e8e9d437)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001), UINT64_C(0x045c9ba34b3be718)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x4b6db9f727760e38)));
  EXPECT_EQ(A >> 38, U128(UINT64_C(0x0000000001cb99d6), UINT64_C(0xc23b931ff7c3ec91)));
  EXPECT_EQ(A << 38, U128(UINT64_C(0xb931ff7c3ec91b05), UINT64_C(0xc58af20000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x72e675b08ee4c7fe), UINT64_C(0x61f4d4efe943e9ee)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0x800173e844e86da2)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0x800294efc53b95ee)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0xf0fbb4efd73fbfee)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x70f9200012042a00)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xa6cd7d5d2a7fa379), UINT64_C(0x6039c755a3f0efb0)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001), UINT64_C(0x045c9ba34b3be718)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x4b6db9f727760e38)));
  EXPECT_EQ((T = A, T >>= 38), U128(UINT64_C(0x0000000001cb99d6), UINT64_C(0xc23b931ff7c3ec91)));
  EXPECT_EQ((T = A, T <<= 38), U128(UINT64_C(0xb931ff7c3ec91b05), UINT64_C(0xc58af20000000000)));
  EXPECT_EQ(ror(A, 38), U128(UINT64_C(0xb05c58af21cb99d6), UINT64_C(0xc23b931ff7c3ec91)));
  EXPECT_EQ(rol(A, 38), U128(UINT64_C(0xb931ff7c3ec91b05), UINT64_C(0xc58af21cb99d6c23)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0xf0fb246c17162bc8)));
  EXPECT_EQ(T, U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0xf0fb246c17162bc9)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0xf0fb246c17162bc8)));
  EXPECT_EQ(T, U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0xf0fb246c17162bc7)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0xf0fb246c17162bc9)));
  EXPECT_EQ(T, U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0xf0fb246c17162bc9)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0xf0fb246c17162bc7)));
  EXPECT_EQ(T, U128(UINT64_C(0x72e675b08ee4c7fd), UINT64_C(0xf0fb246c17162bc7)));
}

TEST(u128, autogen_basic_47) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xedc0b8f72169a781));
  const U128 B = U128(UINT64_C(0x1be8d901e16d6b77), UINT64_C(0x2ff0902ac0366e3a));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x1be8d901e16d6b78), UINT64_C(0x1db14921e1a015bb)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xe41726fe1e929489), UINT64_C(0xbdd028cc61333947)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x1be8d901e16d6b77), UINT64_C(0xc23028dde15fc9bb)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x1be8d901e16d6b77), UINT64_C(0xeff0b8ffe17fefbb)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x2dc0902200202600)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x4c502914470af3da), UINT64_C(0xabd26d6d0d1f613a)));
  EXPECT_EQ(-A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x123f4708de96587f)));
  EXPECT_EQ(~A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x123f4708de96587e)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0xedc0b8f72169a781)));
  EXPECT_EQ(A >> 58, U128(UINT64_C(0x000000000000003b)));
  EXPECT_EQ(A << 58, U128(UINT64_C(0x03b702e3dc85a69e), UINT64_C(0x0400000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x1be8d901e16d6b78), UINT64_C(0x1db14921e1a015bb)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xe41726fe1e929489), UINT64_C(0xbdd028cc61333947)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x1be8d901e16d6b77), UINT64_C(0xc23028dde15fc9bb)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x1be8d901e16d6b77), UINT64_C(0xeff0b8ffe17fefbb)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x2dc0902200202600)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x4c502914470af3da), UINT64_C(0xabd26d6d0d1f613a)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0xedc0b8f72169a781)));
  EXPECT_EQ((T = A, T >>= 58), U128(UINT64_C(0x000000000000003b)));
  EXPECT_EQ((T = A, T <<= 58), U128(UINT64_C(0x03b702e3dc85a69e), UINT64_C(0x0400000000000000)));
  EXPECT_EQ(ror(A, 58), U128(UINT64_C(0x702e3dc85a69e040), UINT64_C(0x000000000000003b)));
  EXPECT_EQ(rol(A, 58), U128(UINT64_C(0x03b702e3dc85a69e), UINT64_C(0x0400000000000000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xedc0b8f72169a781)));
  EXPECT_EQ(T, U128(UINT64_C(0xedc0b8f72169a782)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xedc0b8f72169a781)));
  EXPECT_EQ(T, U128(UINT64_C(0xedc0b8f72169a780)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xedc0b8f72169a782)));
  EXPECT_EQ(T, U128(UINT64_C(0xedc0b8f72169a782)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xedc0b8f72169a780)));
  EXPECT_EQ(T, U128(UINT64_C(0xedc0b8f72169a780)));
}

TEST(u128, autogen_basic_48) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x8006ecf0d260f78e), UINT64_C(0xf654b2164ae87745));
  const U128 B = U128(UINT64_C(0x6b74ce690b27f1fc), UINT64_C(0x75ccf3e166250e9b));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xeb7bbb59dd88e98b), UINT64_C(0x6c21a5f7b10d85e0)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x14921e87c7390592), UINT64_C(0x8087be34e4c368aa)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xeb722299d9470672), UINT64_C(0x839841f72ccd79de)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xeb76eef9db67f7fe), UINT64_C(0xf7dcf3f76eed7fdf)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0004cc600220f18c), UINT64_C(0x7444b20042200601)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x9fb917a0232b099a), UINT64_C(0x7999d15bcc3efcc7)));
  EXPECT_EQ(-A, U128(UINT64_C(0x7ff9130f2d9f0871), UINT64_C(0x09ab4de9b51788bb)));
  EXPECT_EQ(~A, U128(UINT64_C(0x7ff9130f2d9f0871), UINT64_C(0x09ab4de9b51788ba)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x14921e87c7390592), UINT64_C(0x8087be34e4c368aa)));
  EXPECT_EQ(A >> 27, U128(UINT64_C(0x0000001000dd9e1a), UINT64_C(0x4c1ef1deca9642c9)));
  EXPECT_EQ(A << 27, U128(UINT64_C(0x869307bc77b2a590), UINT64_C(0xb25743ba28000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xeb7bbb59dd88e98b), UINT64_C(0x6c21a5f7b10d85e0)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x14921e87c7390592), UINT64_C(0x8087be34e4c368aa)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xeb722299d9470672), UINT64_C(0x839841f72ccd79de)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xeb76eef9db67f7fe), UINT64_C(0xf7dcf3f76eed7fdf)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0004cc600220f18c), UINT64_C(0x7444b20042200601)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x9fb917a0232b099a), UINT64_C(0x7999d15bcc3efcc7)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x14921e87c7390592), UINT64_C(0x8087be34e4c368aa)));
  EXPECT_EQ((T = A, T >>= 27), U128(UINT64_C(0x0000001000dd9e1a), UINT64_C(0x4c1ef1deca9642c9)));
  EXPECT_EQ((T = A, T <<= 27), U128(UINT64_C(0x869307bc77b2a590), UINT64_C(0xb25743ba28000000)));
  EXPECT_EQ(ror(A, 27), U128(UINT64_C(0x5d0ee8b000dd9e1a), UINT64_C(0x4c1ef1deca9642c9)));
  EXPECT_EQ(rol(A, 27), U128(UINT64_C(0x869307bc77b2a590), UINT64_C(0xb25743ba2c003767)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x8006ecf0d260f78e), UINT64_C(0xf654b2164ae87745)));
  EXPECT_EQ(T, U128(UINT64_C(0x8006ecf0d260f78e), UINT64_C(0xf654b2164ae87746)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x8006ecf0d260f78e), UINT64_C(0xf654b2164ae87745)));
  EXPECT_EQ(T, U128(UINT64_C(0x8006ecf0d260f78e), UINT64_C(0xf654b2164ae87744)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x8006ecf0d260f78e), UINT64_C(0xf654b2164ae87746)));
  EXPECT_EQ(T, U128(UINT64_C(0x8006ecf0d260f78e), UINT64_C(0xf654b2164ae87746)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x8006ecf0d260f78e), UINT64_C(0xf654b2164ae87744)));
  EXPECT_EQ(T, U128(UINT64_C(0x8006ecf0d260f78e), UINT64_C(0xf654b2164ae87744)));
}

TEST(u128, autogen_basic_49) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x1a073e52a8886e22), UINT64_C(0x4110cdb677cfbb49));
  const U128 B = U128(UINT64_C(0xdbd8306a5c98b370), UINT64_C(0xd2be46f6af739bff));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xf5df6ebd05212193), UINT64_C(0x13cf14ad27435748)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x3e2f0de84befbab1), UINT64_C(0x6e5286bfc85c1f4a)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xc1df0e38f410dd52), UINT64_C(0x93ae8b40d8bc20b6)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xdbdf3e7afc98ff72), UINT64_C(0xd3becff6ffffbbff)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x1a00304208882220), UINT64_C(0x401044b627439b49)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xde9cfb5af2bb0988), UINT64_C(0xf22b24ca271bc0b7)));
  EXPECT_EQ(-A, U128(UINT64_C(0xe5f8c1ad577791dd), UINT64_C(0xbeef3249883044b7)));
  EXPECT_EQ(~A, U128(UINT64_C(0xe5f8c1ad577791dd), UINT64_C(0xbeef3249883044b6)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x1a073e52a8886e22), UINT64_C(0x4110cdb677cfbb49)));
  EXPECT_EQ(A >> 127, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 127, U128(UINT64_C(0x8000000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xf5df6ebd05212193), UINT64_C(0x13cf14ad27435748)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x3e2f0de84befbab1), UINT64_C(0x6e5286bfc85c1f4a)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xc1df0e38f410dd52), UINT64_C(0x93ae8b40d8bc20b6)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xdbdf3e7afc98ff72), UINT64_C(0xd3becff6ffffbbff)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x1a00304208882220), UINT64_C(0x401044b627439b49)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xde9cfb5af2bb0988), UINT64_C(0xf22b24ca271bc0b7)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x1a073e52a8886e22), UINT64_C(0x4110cdb677cfbb49)));
  EXPECT_EQ((T = A, T >>= 127), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 127), U128(UINT64_C(0x8000000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 127), U128(UINT64_C(0x340e7ca55110dc44), UINT64_C(0x82219b6cef9f7692)));
  EXPECT_EQ(rol(A, 127), U128(UINT64_C(0x8d039f2954443711), UINT64_C(0x208866db3be7dda4)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x1a073e52a8886e22), UINT64_C(0x4110cdb677cfbb49)));
  EXPECT_EQ(T, U128(UINT64_C(0x1a073e52a8886e22), UINT64_C(0x4110cdb677cfbb4a)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x1a073e52a8886e22), UINT64_C(0x4110cdb677cfbb49)));
  EXPECT_EQ(T, U128(UINT64_C(0x1a073e52a8886e22), UINT64_C(0x4110cdb677cfbb48)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x1a073e52a8886e22), UINT64_C(0x4110cdb677cfbb4a)));
  EXPECT_EQ(T, U128(UINT64_C(0x1a073e52a8886e22), UINT64_C(0x4110cdb677cfbb4a)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x1a073e52a8886e22), UINT64_C(0x4110cdb677cfbb48)));
  EXPECT_EQ(T, U128(UINT64_C(0x1a073e52a8886e22), UINT64_C(0x4110cdb677cfbb48)));
}

TEST(u128, autogen_basic_50) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x3686cf32611125f6), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0x28eb1158c251a424), UINT64_C(0x9d7c1112d92337a3));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x5f71e08b2362ca1a), UINT64_C(0x9d7c1112d92337a3)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x0d9bbdd99ebf81d1), UINT64_C(0x6283eeed26dcc85d)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x1e6dde6aa34081d2), UINT64_C(0x9d7c1112d92337a3)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x3eefdf7ae351a5f6), UINT64_C(0x9d7c1112d92337a3)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x2082011040112424), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xee668fc033b505a2), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0xc97930cd9eeeda0a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0xc97930cd9eeeda09), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x0d9bbdd99ebf81d1), UINT64_C(0x6283eeed26dcc85d)));
  EXPECT_EQ(A >> 35, U128(UINT64_C(0x0000000006d0d9e6), UINT64_C(0x4c2224bec0000000)));
  EXPECT_EQ(A << 35, U128(UINT64_C(0x08892fb000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x5f71e08b2362ca1a), UINT64_C(0x9d7c1112d92337a3)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x0d9bbdd99ebf81d1), UINT64_C(0x6283eeed26dcc85d)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x1e6dde6aa34081d2), UINT64_C(0x9d7c1112d92337a3)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x3eefdf7ae351a5f6), UINT64_C(0x9d7c1112d92337a3)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x2082011040112424), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xee668fc033b505a2), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x0d9bbdd99ebf81d1), UINT64_C(0x6283eeed26dcc85d)));
  EXPECT_EQ((T = A, T >>= 35), U128(UINT64_C(0x0000000006d0d9e6), UINT64_C(0x4c2224bec0000000)));
  EXPECT_EQ((T = A, T <<= 35), U128(UINT64_C(0x08892fb000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 35), U128(UINT64_C(0x0000000006d0d9e6), UINT64_C(0x4c2224bec0000000)));
  EXPECT_EQ(rol(A, 35), U128(UINT64_C(0x08892fb000000000), UINT64_C(0x00000001b4367993)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x3686cf32611125f6), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x3686cf32611125f6), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x3686cf32611125f6), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x3686cf32611125f5), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x3686cf32611125f6), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0x3686cf32611125f6), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x3686cf32611125f5), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0x3686cf32611125f5), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_51) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584587));
  const U128 B = U128(UINT64_C(0x12ad9fffa96e378d), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x78a18dea47d56fa5), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x53464deaf4f9008b), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x775e721537090f95), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x77ffffffbf6f3f9d), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x00a18dea88663008), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x41c040a968904c5b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0x9a0c12156198c7e7), UINT64_C(0xa349babb35a7ba79)));
  EXPECT_EQ(~A, U128(UINT64_C(0x9a0c12156198c7e7), UINT64_C(0xa349babb35a7ba78)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000005)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x088fcdec4f402257), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x78a18dea47d56fa5), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x53464deaf4f9008b), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x775e721537090f95), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x77ffffffbf6f3f9d), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x00a18dea88663008), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x41c040a968904c5b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000005)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x088fcdec4f402257), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ(T, U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584588)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584587)));
  EXPECT_EQ(T, U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584586)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584588)));
  EXPECT_EQ(T, U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584588)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584586)));
  EXPECT_EQ(T, U128(UINT64_C(0x65f3edea9e673818), UINT64_C(0x5cb64544ca584586)));
}

TEST(u128, autogen_basic_52) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xb931fd6db376f011), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0xa508a7b7defcb30a), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x5e3aa5259273a31b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x142955b5d47a3d07), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x1c395ada6d8a431b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xbd39fffffffef31b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, U128(UINT64_C(0xa100a5259274b000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0x46ce02924c890fef), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0x46ce02924c890fee), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x142955b5d47a3d07), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0xb931fd6db376f011), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0xb931fd6db376f011), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x5e3aa5259273a31b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x142955b5d47a3d07), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x1c395ada6d8a431b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xbd39fffffffef31b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0xa100a5259274b000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x142955b5d47a3d07), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0xb931fd6db376f011), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0xb931fd6db376f011), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0xb931fd6db376f011), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0xb931fd6db376f011), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xb931fd6db376f011), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0xb931fd6db376f011), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xb931fd6db376f011), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0xb931fd6db376f010), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xb931fd6db376f011), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0xb931fd6db376f011), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xb931fd6db376f010), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0xb931fd6db376f010), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_53) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x9ce3725366b569ab), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0x36c29e4b4a4d234c));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x9ce3725366b569ab), UINT64_C(0x36c29e4b4a4d234c)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x9ce3725366b569aa), UINT64_C(0xc93d61b4b5b2dcb4)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x9ce3725366b569ab), UINT64_C(0x36c29e4b4a4d234c)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x9ce3725366b569ab), UINT64_C(0x36c29e4b4a4d234c)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x5ee12c0281bcbfc4), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0x631c8dac994a9655), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0x631c8dac994a9654), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000002), UINT64_C(0xdd7121904a1adc33)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x1295445c5a94a7dc)));
  EXPECT_EQ(A >> 76, U128(UINT64_C(0x0009ce3725366b56)));
  EXPECT_EQ(A << 76, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x9ce3725366b569ab), UINT64_C(0x36c29e4b4a4d234c)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x9ce3725366b569aa), UINT64_C(0xc93d61b4b5b2dcb4)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x9ce3725366b569ab), UINT64_C(0x36c29e4b4a4d234c)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x9ce3725366b569ab), UINT64_C(0x36c29e4b4a4d234c)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x5ee12c0281bcbfc4), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000002), UINT64_C(0xdd7121904a1adc33)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x1295445c5a94a7dc)));
  EXPECT_EQ((T = A, T >>= 76), U128(UINT64_C(0x0009ce3725366b56)));
  EXPECT_EQ((T = A, T <<= 76), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 76), U128(UINT64_C(0x9ab0000000000000), UINT64_C(0x0009ce3725366b56)));
  EXPECT_EQ(rol(A, 76), U128(UINT64_C(0x00000000000009ce), UINT64_C(0x3725366b569ab000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x9ce3725366b569ab), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x9ce3725366b569ab), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x9ce3725366b569ab), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x9ce3725366b569aa), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x9ce3725366b569ab), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0x9ce3725366b569ab), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x9ce3725366b569aa), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0x9ce3725366b569aa), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_54) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x2d4ad35849c528d5));
  const U128 B = U128(UINT64_C(0xf8762620493de95e), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xf8762620493de95e), UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x0789d9dfb6c216a2), UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xf8762620493de95e), UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xf8762620493de95e), UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xebca7acf004fdb36), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(-INT64_C(3263653256131586261)));
  EXPECT_EQ(~A, U128(-INT64_C(3263653256131586262)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xf8762620493de95e), UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x0789d9dfb6c216a2), UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xf8762620493de95e), UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xf8762620493de95e), UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xebca7acf004fdb36), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ(T, U128(UINT64_C(0x2d4ad35849c528d6)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x2d4ad35849c528d5)));
  EXPECT_EQ(T, U128(UINT64_C(0x2d4ad35849c528d4)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x2d4ad35849c528d6)));
  EXPECT_EQ(T, U128(UINT64_C(0x2d4ad35849c528d6)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x2d4ad35849c528d4)));
  EXPECT_EQ(T, U128(UINT64_C(0x2d4ad35849c528d4)));
}

TEST(u128, autogen_basic_55) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x4f0bc06dd74cdcf2));
  const U128 B = U128(UINT64_C(0x674717edbe4a59c0), UINT64_C(0xb89e3c5b89bf880f));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x674717edbe4a59c0), UINT64_C(0x07a9fcc9610c6501)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x98b8e81241b5a63e), UINT64_C(0x966d84124d8d54e3)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x98b8e81241b5a63f), UINT64_C(0xf795fc365ef354fd)));
  EXPECT_EQ(A | B, U128(-INT64_C(27025446591800065)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x674717edbe4a59c0), UINT64_C(0x080a0049810c8802)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xe3c5264fde0402f3), UINT64_C(0x138da76ccd6f822e)));
  EXPECT_EQ(-A, U128(UINT64_C(0xb0f43f9228b3230e)));
  EXPECT_EQ(~A, U128(UINT64_C(0xb0f43f9228b3230d)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000002)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x3171d024836b4c7d), UINT64_C(0xddcf47b6c3cdccd4)));
  EXPECT_EQ(A >> 15, U128(UINT64_C(0x0001ffffffffffff), UINT64_C(0xfffe9e1780dbae99)));
  EXPECT_EQ(A << 15, U128(UINT64_C(0xffffffffffffa785), UINT64_C(0xe036eba66e790000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x674717edbe4a59c0), UINT64_C(0x07a9fcc9610c6501)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x98b8e81241b5a63e), UINT64_C(0x966d84124d8d54e3)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x98b8e81241b5a63f), UINT64_C(0xf795fc365ef354fd)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(27025446591800065)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x674717edbe4a59c0), UINT64_C(0x080a0049810c8802)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xe3c5264fde0402f3), UINT64_C(0x138da76ccd6f822e)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000002)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x3171d024836b4c7d), UINT64_C(0xddcf47b6c3cdccd4)));
  EXPECT_EQ((T = A, T >>= 15), U128(UINT64_C(0x0001ffffffffffff), UINT64_C(0xfffe9e1780dbae99)));
  EXPECT_EQ((T = A, T <<= 15), U128(UINT64_C(0xffffffffffffa785), UINT64_C(0xe036eba66e790000)));
  EXPECT_EQ(ror(A, 15), U128(UINT64_C(0xb9e5ffffffffffff), UINT64_C(0xfffe9e1780dbae99)));
  EXPECT_EQ(rol(A, 15), U128(UINT64_C(0xffffffffffffa785), UINT64_C(0xe036eba66e797fff)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x4f0bc06dd74cdcf2)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x4f0bc06dd74cdcf3)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x4f0bc06dd74cdcf2)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x4f0bc06dd74cdcf1)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x4f0bc06dd74cdcf3)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x4f0bc06dd74cdcf3)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x4f0bc06dd74cdcf1)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x4f0bc06dd74cdcf1)));
}

TEST(u128, autogen_basic_56) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0x5a82ab69f081c4b3));
  const U128 B = U128(-INT64_C(7128797457963522599));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x17995e79c82d0f73), UINT64_C(0xf79417e552e22a8c)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0xbd713eee8e215eda)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xe866a18637d2f08b), UINT64_C(0xc793c71292e1a16a)));
  EXPECT_EQ(A | B, U128(-INT64_C(2336260466040248837)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0x1800286960004491)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xc7786f7ed2b2cedf), UINT64_C(0x4067fca759ba5abb)));
  EXPECT_EQ(-A, U128(UINT64_C(0xe866a18637d2f08b), UINT64_C(0xa57d54960f7e3b4d)));
  EXPECT_EQ(~A, U128(UINT64_C(0xe866a18637d2f08b), UINT64_C(0xa57d54960f7e3b4c)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0x5a82ab69f081c4b3)));
  EXPECT_EQ(A >> 89, U128(UINT64_C(0x0000000bccaf3ce4)));
  EXPECT_EQ(A << 89, U128(UINT64_C(0xd3e1038966000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x17995e79c82d0f73), UINT64_C(0xf79417e552e22a8c)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0xbd713eee8e215eda)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xe866a18637d2f08b), UINT64_C(0xc793c71292e1a16a)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(2336260466040248837)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0x1800286960004491)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xc7786f7ed2b2cedf), UINT64_C(0x4067fca759ba5abb)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0x5a82ab69f081c4b3)));
  EXPECT_EQ((T = A, T >>= 89), U128(UINT64_C(0x0000000bccaf3ce4)));
  EXPECT_EQ((T = A, T <<= 89), U128(UINT64_C(0xd3e1038966000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 89), U128(UINT64_C(0x1687ba2d4155b4f8), UINT64_C(0x40e2598bccaf3ce4)));
  EXPECT_EQ(rol(A, 89), U128(UINT64_C(0xd3e10389662f32bc), UINT64_C(0xf3905a1ee8b50556)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0x5a82ab69f081c4b3)));
  EXPECT_EQ(T, U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0x5a82ab69f081c4b4)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0x5a82ab69f081c4b3)));
  EXPECT_EQ(T, U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0x5a82ab69f081c4b2)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0x5a82ab69f081c4b4)));
  EXPECT_EQ(T, U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0x5a82ab69f081c4b4)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0x5a82ab69f081c4b2)));
  EXPECT_EQ(T, U128(UINT64_C(0x17995e79c82d0f74), UINT64_C(0x5a82ab69f081c4b2)));
}

TEST(u128, autogen_basic_57) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(-INT64_C(1711046196761433315));
  const U128 B = U128(-INT64_C(4394426015825600058));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(-INT64_C(6105472212587033373)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x253d47ba70c58957)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x2b42f85e913a8adb)));
  EXPECT_EQ(A | B, U128(-INT64_C(1494072617723040801)));
  EXPECT_EQ(A & B, U128(-INT64_C(4611399594863992572)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x05a81e9262c699b3), UINT64_C(0x87b1f0ebad49556e)));
  EXPECT_EQ(-A, U128(UINT64_C(0x17bedb73503f94e3)));
  EXPECT_EQ(~A, U128(UINT64_C(0x17bedb73503f94e2)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x253d47ba70c58957)));
  EXPECT_EQ(A >> 70, U128(UINT64_C(0x03ffffffffffffff)));
  EXPECT_EQ(A << 70, U128(UINT64_C(0x1049232bf01ac740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(-INT64_C(6105472212587033373)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x253d47ba70c58957)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x2b42f85e913a8adb)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(1494072617723040801)));
  EXPECT_EQ((T = A, T &= B), U128(-INT64_C(4611399594863992572)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x05a81e9262c699b3), UINT64_C(0x87b1f0ebad49556e)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x253d47ba70c58957)));
  EXPECT_EQ((T = A, T >>= 70), U128(UINT64_C(0x03ffffffffffffff)));
  EXPECT_EQ((T = A, T <<= 70), U128(UINT64_C(0x1049232bf01ac740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 70), U128(UINT64_C(0xffa1049232bf01ac), UINT64_C(0x77ffffffffffffff)));
  EXPECT_EQ(rol(A, 70), U128(UINT64_C(0x1049232bf01ac77f), UINT64_C(0xfffffffffffffffa)));
  EXPECT_EQ((T = A, T++), U128(-INT64_C(1711046196761433315)));
  EXPECT_EQ(T, U128(-INT64_C(1711046196761433314)));
  EXPECT_EQ((T = A, T--), U128(-INT64_C(1711046196761433315)));
  EXPECT_EQ(T, U128(-INT64_C(1711046196761433316)));
  EXPECT_EQ((T = A, ++T), U128(-INT64_C(1711046196761433314)));
  EXPECT_EQ(T, U128(-INT64_C(1711046196761433314)));
  EXPECT_EQ((T = A, --T), U128(-INT64_C(1711046196761433316)));
  EXPECT_EQ(T, U128(-INT64_C(1711046196761433316)));
}

TEST(u128, autogen_basic_58) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x796c322375718397));
  const U128 B = U128(UINT64_C(0x69c1964e453eb868));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(-INT64_C(2076783462358959105)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x0faa9bd53032cb2f)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x10ada46d304f3bff)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x79edb66f757fbbff)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x6940120245308000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xc8679c1e97d857f2), UINT64_C(0x3ac376c8de43fd58)));
  EXPECT_EQ(-A, U128(UINT64_C(0x8693cddc8a8e7c69)));
  EXPECT_EQ(~A, U128(UINT64_C(0x8693cddc8a8e7c68)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000002), UINT64_C(0x6bb07f05bdcde169)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x16e8cdc67b5c78ef)));
  EXPECT_EQ(A >> 104, U128(UINT64_C(0x0000000000ffffff)));
  EXPECT_EQ(A << 104, U128(UINT64_C(0x7183970000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(-INT64_C(2076783462358959105)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x0faa9bd53032cb2f)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x10ada46d304f3bff)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x79edb66f757fbbff)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x6940120245308000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xc8679c1e97d857f2), UINT64_C(0x3ac376c8de43fd58)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000002), UINT64_C(0x6bb07f05bdcde169)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x16e8cdc67b5c78ef)));
  EXPECT_EQ((T = A, T >>= 104), U128(UINT64_C(0x0000000000ffffff)));
  EXPECT_EQ((T = A, T <<= 104), U128(UINT64_C(0x7183970000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 104), U128(UINT64_C(0xffffffffff796c32), UINT64_C(0x2375718397ffffff)));
  EXPECT_EQ(rol(A, 104), U128(UINT64_C(0x718397ffffffffff), UINT64_C(0xffffff796c322375)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x796c322375718397)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x796c322375718398)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x796c322375718397)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x796c322375718396)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x796c322375718398)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x796c322375718398)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x796c322375718396)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x796c322375718396)));
}

TEST(u128, autogen_basic_59) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xc5a8802f37513ca1));
  const U128 B = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2f91feab57868bda));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(-INT64_C(776168508603512709)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x0000000000000001), UINT64_C(0x96168183dfcab0c7)));
  EXPECT_EQ(A ^ B, U128(-INT64_C(1569083888136374405)));
  EXPECT_EQ(A | B, U128(-INT64_C(1172626198369943557)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0580802b17000880)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x5f12286b88e5a0ae), UINT64_C(0x673698e9aa5f0c1a)));
  EXPECT_EQ(-A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x3a577fd0c8aec35f)));
  EXPECT_EQ(~A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x3a577fd0c8aec35e)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0xc5a8802f37513ca1)));
  EXPECT_EQ(A >> 90, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 90, U128(UINT64_C(0xbcdd44f284000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(-INT64_C(776168508603512709)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x0000000000000001), UINT64_C(0x96168183dfcab0c7)));
  EXPECT_EQ((T = A, T ^= B), U128(-INT64_C(1569083888136374405)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(1172626198369943557)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0580802b17000880)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x5f12286b88e5a0ae), UINT64_C(0x673698e9aa5f0c1a)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0xc5a8802f37513ca1)));
  EXPECT_EQ((T = A, T >>= 90), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 90), U128(UINT64_C(0xbcdd44f284000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 90), U128(UINT64_C(0x000000316a200bcd), UINT64_C(0xd44f284000000000)));
  EXPECT_EQ(rol(A, 90), U128(UINT64_C(0xbcdd44f284000000), UINT64_C(0x000000000316a200)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xc5a8802f37513ca1)));
  EXPECT_EQ(T, U128(UINT64_C(0xc5a8802f37513ca2)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xc5a8802f37513ca1)));
  EXPECT_EQ(T, U128(UINT64_C(0xc5a8802f37513ca0)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xc5a8802f37513ca2)));
  EXPECT_EQ(T, U128(UINT64_C(0xc5a8802f37513ca2)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xc5a8802f37513ca0)));
  EXPECT_EQ(T, U128(UINT64_C(0xc5a8802f37513ca0)));
}

TEST(u128, autogen_basic_60) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xcdc3aeec429268bb));
  const U128 B = U128(UINT64_C(0xb824dcd21378089c));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x0000000000000001), UINT64_C(0x85e88bbe560a7157)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x159ed21a2f1a601f)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x75e7723e51ea6027)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xfde7fefe53fa68bf)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x88008cc002100898)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x940246bb6d911f82), UINT64_C(0x98cca9da1d25a9f4)));
  EXPECT_EQ(-A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x323c5113bd6d9745)));
  EXPECT_EQ(~A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x323c5113bd6d9744)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x159ed21a2f1a601f)));
  EXPECT_EQ(A >> 28, U128(UINT64_C(0x0000000cdc3aeec4)));
  EXPECT_EQ(A << 28, U128(UINT64_C(0x000000000cdc3aee), UINT64_C(0xc429268bb0000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x0000000000000001), UINT64_C(0x85e88bbe560a7157)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x159ed21a2f1a601f)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x75e7723e51ea6027)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xfde7fefe53fa68bf)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x88008cc002100898)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x940246bb6d911f82), UINT64_C(0x98cca9da1d25a9f4)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x159ed21a2f1a601f)));
  EXPECT_EQ((T = A, T >>= 28), U128(UINT64_C(0x0000000cdc3aeec4)));
  EXPECT_EQ((T = A, T <<= 28), U128(UINT64_C(0x000000000cdc3aee), UINT64_C(0xc429268bb0000000)));
  EXPECT_EQ(ror(A, 28), U128(UINT64_C(0x29268bb000000000), UINT64_C(0x0000000cdc3aeec4)));
  EXPECT_EQ(rol(A, 28), U128(UINT64_C(0x000000000cdc3aee), UINT64_C(0xc429268bb0000000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xcdc3aeec429268bb)));
  EXPECT_EQ(T, U128(UINT64_C(0xcdc3aeec429268bc)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xcdc3aeec429268bb)));
  EXPECT_EQ(T, U128(UINT64_C(0xcdc3aeec429268ba)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xcdc3aeec429268bc)));
  EXPECT_EQ(T, U128(UINT64_C(0xcdc3aeec429268bc)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xcdc3aeec429268ba)));
  EXPECT_EQ(T, U128(UINT64_C(0xcdc3aeec429268ba)));
}

TEST(u128, autogen_basic_61) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x24cedc9e48371e65), UINT64_C(0x2202ca00adf4f410));
  const U128 B = U128(UINT64_C(0xf1324b3ac5efaf2e));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x24cedc9e48371e66), UINT64_C(0x1335153b73e4a33e)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x24cedc9e48371e64), UINT64_C(0x30d07ec5e80544e2)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x24cedc9e48371e65), UINT64_C(0xd330813a681b5b3e)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x24cedc9e48371e65), UINT64_C(0xf332cb3aedffff3e)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x20024a0085e4a400)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x727d763e78fb0932), UINT64_C(0x0936a629dfcacae0)));
  EXPECT_EQ(-A, U128(UINT64_C(0xdb312361b7c8e19a), UINT64_C(0xddfd35ff520b0bf0)));
  EXPECT_EQ(~A, U128(UINT64_C(0xdb312361b7c8e19a), UINT64_C(0xddfd35ff520b0bef)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x271131b0f01047fd)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x69d5d32f839f119a)));
  EXPECT_EQ(A >> 46, U128(UINT64_C(0x000000000000933b), UINT64_C(0x727920dc7994880b)));
  EXPECT_EQ(A << 46, U128(UINT64_C(0xc7994880b2802b7d), UINT64_C(0x3d04000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x24cedc9e48371e66), UINT64_C(0x1335153b73e4a33e)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x24cedc9e48371e64), UINT64_C(0x30d07ec5e80544e2)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x24cedc9e48371e65), UINT64_C(0xd330813a681b5b3e)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x24cedc9e48371e65), UINT64_C(0xf332cb3aedffff3e)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x20024a0085e4a400)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x727d763e78fb0932), UINT64_C(0x0936a629dfcacae0)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x271131b0f01047fd)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x69d5d32f839f119a)));
  EXPECT_EQ((T = A, T >>= 46), U128(UINT64_C(0x000000000000933b), UINT64_C(0x727920dc7994880b)));
  EXPECT_EQ((T = A, T <<= 46), U128(UINT64_C(0xc7994880b2802b7d), UINT64_C(0x3d04000000000000)));
  EXPECT_EQ(ror(A, 46), U128(UINT64_C(0x2802b7d3d040933b), UINT64_C(0x727920dc7994880b)));
  EXPECT_EQ(rol(A, 46), U128(UINT64_C(0xc7994880b2802b7d), UINT64_C(0x3d040933b727920d)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x24cedc9e48371e65), UINT64_C(0x2202ca00adf4f410)));
  EXPECT_EQ(T, U128(UINT64_C(0x24cedc9e48371e65), UINT64_C(0x2202ca00adf4f411)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x24cedc9e48371e65), UINT64_C(0x2202ca00adf4f410)));
  EXPECT_EQ(T, U128(UINT64_C(0x24cedc9e48371e65), UINT64_C(0x2202ca00adf4f40f)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x24cedc9e48371e65), UINT64_C(0x2202ca00adf4f411)));
  EXPECT_EQ(T, U128(UINT64_C(0x24cedc9e48371e65), UINT64_C(0x2202ca00adf4f411)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x24cedc9e48371e65), UINT64_C(0x2202ca00adf4f40f)));
  EXPECT_EQ(T, U128(UINT64_C(0x24cedc9e48371e65), UINT64_C(0x2202ca00adf4f40f)));
}

TEST(u128, autogen_basic_62) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x94ffa87556529469));
  const U128 B = U128(UINT64_C(0xfc8172c0ddda581f), UINT64_C(0x60005126c68b5fc2));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xfc8172c0ddda581f), UINT64_C(0xf4fff99c1cddf42b)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x037e8d3f2225a7e1), UINT64_C(0x34ff574e8fc734a7)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xfc8172c0ddda581f), UINT64_C(0xf4fff95390d9cbab)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xfc8172c0ddda581f), UINT64_C(0xf4fff977d6dbdfeb)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0000002446021440)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x8d1da77a539c04f0), UINT64_C(0x52f23229daaa6e92)));
  EXPECT_EQ(-A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x6b00578aa9ad6b97)));
  EXPECT_EQ(~A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x6b00578aa9ad6b96)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x94ffa87556529469)));
  EXPECT_EQ(A >> 66, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 66, U128(UINT64_C(0x53fea1d5594a51a4), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xfc8172c0ddda581f), UINT64_C(0xf4fff99c1cddf42b)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x037e8d3f2225a7e1), UINT64_C(0x34ff574e8fc734a7)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xfc8172c0ddda581f), UINT64_C(0xf4fff95390d9cbab)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xfc8172c0ddda581f), UINT64_C(0xf4fff977d6dbdfeb)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0000002446021440)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x8d1da77a539c04f0), UINT64_C(0x52f23229daaa6e92)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x94ffa87556529469)));
  EXPECT_EQ((T = A, T >>= 66), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 66), U128(UINT64_C(0x53fea1d5594a51a4), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 66), U128(UINT64_C(0x253fea1d5594a51a), UINT64_C(0x4000000000000000)));
  EXPECT_EQ(rol(A, 66), U128(UINT64_C(0x53fea1d5594a51a4), UINT64_C(0x0000000000000002)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x94ffa87556529469)));
  EXPECT_EQ(T, U128(UINT64_C(0x94ffa8755652946a)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x94ffa87556529469)));
  EXPECT_EQ(T, U128(UINT64_C(0x94ffa87556529468)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x94ffa8755652946a)));
  EXPECT_EQ(T, U128(UINT64_C(0x94ffa8755652946a)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x94ffa87556529468)));
  EXPECT_EQ(T, U128(UINT64_C(0x94ffa87556529468)));
}

TEST(u128, autogen_basic_63) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xe818098b67d7f196), UINT64_C(0xd1a14d4a7d8462ad));
  const U128 B = U128(UINT64_C(0xeaa53a86a8a8aec4), UINT64_C(0x6dc9595a33d575c3));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xd2bd44121080a05b), UINT64_C(0x3f6aa6a4b159d870)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xfd72cf04bf2f42d2), UINT64_C(0x63d7f3f049aeecea)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x02bd330dcf7f5f52), UINT64_C(0xbc6814104e51176e)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xeabd3b8fefffffd6), UINT64_C(0xfde95d5a7fd577ef)));
  EXPECT_EQ(A & B, U128(UINT64_C(0xe80008822080a084), UINT64_C(0x4181494a31846081)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x235ef170649da087), UINT64_C(0xd5da8fbbade13ac7)));
  EXPECT_EQ(-A, U128(UINT64_C(0x17e7f67498280e69), UINT64_C(0x2e5eb2b5827b9d53)));
  EXPECT_EQ(~A, U128(UINT64_C(0x17e7f67498280e69), UINT64_C(0x2e5eb2b5827b9d52)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0xe818098b67d7f196), UINT64_C(0xd1a14d4a7d8462ad)));
  EXPECT_EQ(A >> 67, U128(UINT64_C(0x1d0301316cfafe32)));
  EXPECT_EQ(A << 67, U128(UINT64_C(0x8d0a6a53ec231568), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xd2bd44121080a05b), UINT64_C(0x3f6aa6a4b159d870)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xfd72cf04bf2f42d2), UINT64_C(0x63d7f3f049aeecea)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x02bd330dcf7f5f52), UINT64_C(0xbc6814104e51176e)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xeabd3b8fefffffd6), UINT64_C(0xfde95d5a7fd577ef)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0xe80008822080a084), UINT64_C(0x4181494a31846081)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x235ef170649da087), UINT64_C(0xd5da8fbbade13ac7)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0xe818098b67d7f196), UINT64_C(0xd1a14d4a7d8462ad)));
  EXPECT_EQ((T = A, T >>= 67), U128(UINT64_C(0x1d0301316cfafe32)));
  EXPECT_EQ((T = A, T <<= 67), U128(UINT64_C(0x8d0a6a53ec231568), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 67), U128(UINT64_C(0xda3429a94fb08c55), UINT64_C(0xbd0301316cfafe32)));
  EXPECT_EQ(rol(A, 67), U128(UINT64_C(0x8d0a6a53ec23156f), UINT64_C(0x40c04c5b3ebf8cb6)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xe818098b67d7f196), UINT64_C(0xd1a14d4a7d8462ad)));
  EXPECT_EQ(T, U128(UINT64_C(0xe818098b67d7f196), UINT64_C(0xd1a14d4a7d8462ae)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xe818098b67d7f196), UINT64_C(0xd1a14d4a7d8462ad)));
  EXPECT_EQ(T, U128(UINT64_C(0xe818098b67d7f196), UINT64_C(0xd1a14d4a7d8462ac)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xe818098b67d7f196), UINT64_C(0xd1a14d4a7d8462ae)));
  EXPECT_EQ(T, U128(UINT64_C(0xe818098b67d7f196), UINT64_C(0xd1a14d4a7d8462ae)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xe818098b67d7f196), UINT64_C(0xd1a14d4a7d8462ac)));
  EXPECT_EQ(T, U128(UINT64_C(0xe818098b67d7f196), UINT64_C(0xd1a14d4a7d8462ac)));
}

TEST(u128, autogen_basic_64) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x2606ce30ca90f8aa), UINT64_C(0x88529ca5b1318d31));
  const U128 B = U128(UINT64_C(0xfb659d9d7f51acb8), UINT64_C(0x4cbd6880048a25a7));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x216c6bce49e2a562), UINT64_C(0xd5100525b5bbb2d8)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x2aa130934b3f4bf2), UINT64_C(0x3b953425aca7678a)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xdd6353adb5c15412), UINT64_C(0xc4eff425b5bba896)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xff67dfbdffd1fcba), UINT64_C(0xccfffca5b5bbadb7)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x22048c104a10a8a8), UINT64_C(0x0810088000000521)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x25da0133006d357a), UINT64_C(0x69edee1da1252ff7)));
  EXPECT_EQ(-A, U128(UINT64_C(0xd9f931cf356f0755), UINT64_C(0x77ad635a4ece72cf)));
  EXPECT_EQ(~A, U128(UINT64_C(0xd9f931cf356f0755), UINT64_C(0x77ad635a4ece72ce)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x2606ce30ca90f8aa), UINT64_C(0x88529ca5b1318d31)));
  EXPECT_EQ(A >> 39, U128(UINT64_C(0x00000000004c0d9c), UINT64_C(0x619521f15510a539)));
  EXPECT_EQ(A << 39, U128(UINT64_C(0x487c5544294e52d8), UINT64_C(0x98c6988000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x216c6bce49e2a562), UINT64_C(0xd5100525b5bbb2d8)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x2aa130934b3f4bf2), UINT64_C(0x3b953425aca7678a)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xdd6353adb5c15412), UINT64_C(0xc4eff425b5bba896)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xff67dfbdffd1fcba), UINT64_C(0xccfffca5b5bbadb7)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x22048c104a10a8a8), UINT64_C(0x0810088000000521)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x25da0133006d357a), UINT64_C(0x69edee1da1252ff7)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x2606ce30ca90f8aa), UINT64_C(0x88529ca5b1318d31)));
  EXPECT_EQ((T = A, T >>= 39), U128(UINT64_C(0x00000000004c0d9c), UINT64_C(0x619521f15510a539)));
  EXPECT_EQ((T = A, T <<= 39), U128(UINT64_C(0x487c5544294e52d8), UINT64_C(0x98c6988000000000)));
  EXPECT_EQ(ror(A, 39), U128(UINT64_C(0x4b62631a624c0d9c), UINT64_C(0x619521f15510a539)));
  EXPECT_EQ(rol(A, 39), U128(UINT64_C(0x487c5544294e52d8), UINT64_C(0x98c6989303671865)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x2606ce30ca90f8aa), UINT64_C(0x88529ca5b1318d31)));
  EXPECT_EQ(T, U128(UINT64_C(0x2606ce30ca90f8aa), UINT64_C(0x88529ca5b1318d32)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x2606ce30ca90f8aa), UINT64_C(0x88529ca5b1318d31)));
  EXPECT_EQ(T, U128(UINT64_C(0x2606ce30ca90f8aa), UINT64_C(0x88529ca5b1318d30)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x2606ce30ca90f8aa), UINT64_C(0x88529ca5b1318d32)));
  EXPECT_EQ(T, U128(UINT64_C(0x2606ce30ca90f8aa), UINT64_C(0x88529ca5b1318d32)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x2606ce30ca90f8aa), UINT64_C(0x88529ca5b1318d30)));
  EXPECT_EQ(T, U128(UINT64_C(0x2606ce30ca90f8aa), UINT64_C(0x88529ca5b1318d30)));
}

TEST(u128, autogen_basic_65) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x8f77e79c3b0348fe), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0x481594e56bada1ec), UINT64_C(0x01b416db569d0bcb));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xd78d7c81a6b0eaea), UINT64_C(0x01b416db569d0bcb)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x476252b6cf55a711), UINT64_C(0xfe4be924a962f435)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xc762737950aee912), UINT64_C(0x01b416db569d0bcb)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xcf77f7fd7bafe9fe), UINT64_C(0x01b416db569d0bcb)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x081584842b0100ec), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x8658f03f0783cb6a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0x70881863c4fcb702), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0x70881863c4fcb701), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x476252b6cf55a711), UINT64_C(0xfe4be924a962f435)));
  EXPECT_EQ(A >> 75, U128(UINT64_C(0x0011eefcf3876069)));
  EXPECT_EQ(A << 75, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xd78d7c81a6b0eaea), UINT64_C(0x01b416db569d0bcb)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x476252b6cf55a711), UINT64_C(0xfe4be924a962f435)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xc762737950aee912), UINT64_C(0x01b416db569d0bcb)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xcf77f7fd7bafe9fe), UINT64_C(0x01b416db569d0bcb)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x081584842b0100ec), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x8658f03f0783cb6a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x476252b6cf55a711), UINT64_C(0xfe4be924a962f435)));
  EXPECT_EQ((T = A, T >>= 75), U128(UINT64_C(0x0011eefcf3876069)));
  EXPECT_EQ((T = A, T <<= 75), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 75), U128(UINT64_C(0x1fc0000000000000), UINT64_C(0x0011eefcf3876069)));
  EXPECT_EQ(rol(A, 75), U128(UINT64_C(0x000000000000047b), UINT64_C(0xbf3ce1d81a47f000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x8f77e79c3b0348fe), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x8f77e79c3b0348fe), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x8f77e79c3b0348fe), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0x8f77e79c3b0348fd), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x8f77e79c3b0348fe), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0x8f77e79c3b0348fe), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x8f77e79c3b0348fd), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0x8f77e79c3b0348fd), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_66) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c2f));
  const U128 B = U128(UINT64_C(0xe0f6f276dc0757f5), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x24d33c7612f4da55), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x62e557885ae62a6b), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xa32abb89eaead595), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xe3fefbfffeefd7f5), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x40d4407614050260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xe119e286d1b1a1fb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0xbc23b600c9127d9f), UINT64_C(0x974f00932b4af3d1)));
  EXPECT_EQ(~A, U128(UINT64_C(0xbc23b600c9127d9f), UINT64_C(0x974f00932b4af3d0)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x24d33c7612f4da55), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x62e557885ae62a6b), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xa32abb89eaead595), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xe3fefbfffeefd7f5), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x40d4407614050260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xe119e286d1b1a1fb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ(T, U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c30)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c2f)));
  EXPECT_EQ(T, U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c2e)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c30)));
  EXPECT_EQ(T, U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c30)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c2e)));
  EXPECT_EQ(T, U128(UINT64_C(0x43dc49ff36ed8260), UINT64_C(0x68b0ff6cd4b50c2e)));
}

TEST(u128, autogen_basic_67) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xd19c17c973ff46f9), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0x39a5dc6737a0f692), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x0b41f430aba03d8b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x97f63b623c5e5067), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xe839cbae445fb06b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xf9bddfef77fff6fb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x1184144133a04690), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0x2e63e8368c00b907), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0x2e63e8368c00b906), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000003)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x24aa8293cd1c6343), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0xd19c17c973ff46f9), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0xd19c17c973ff46f9), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x0b41f430aba03d8b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x97f63b623c5e5067), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xe839cbae445fb06b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xf9bddfef77fff6fb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x1184144133a04690), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000003)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x24aa8293cd1c6343), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0xd19c17c973ff46f9), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0xd19c17c973ff46f9), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0xd19c17c973ff46f9), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0xd19c17c973ff46f9), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xd19c17c973ff46f9), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0xd19c17c973ff46f9), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xd19c17c973ff46f9), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0xd19c17c973ff46f8), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xd19c17c973ff46f9), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0xd19c17c973ff46f9), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xd19c17c973ff46f8), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0xd19c17c973ff46f8), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_68) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xe83f4441391f4ad3), UINT64_C(0x0000000000000000));
  const U128 B = U128(UINT64_C(0xc340b4df3a698214));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xe83f4441391f4ad3), UINT64_C(0xc340b4df3a698214)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xe83f4441391f4ad2), UINT64_C(0x3cbf4b20c5967dec)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xe83f4441391f4ad3), UINT64_C(0xc340b4df3a698214)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xe83f4441391f4ad3), UINT64_C(0xc340b4df3a698214)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x3bea82b0d8fbfe7c), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0x17c0bbbec6e0b52d), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, U128(UINT64_C(0x17c0bbbec6e0b52c), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001), UINT64_C(0x30810cee93ae1ba3)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x303122b4c8821144)));
  EXPECT_EQ(A >> 20, U128(UINT64_C(0x00000e83f4441391), UINT64_C(0xf4ad300000000000)));
  EXPECT_EQ(A << 20, U128(UINT64_C(0x441391f4ad300000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xe83f4441391f4ad3), UINT64_C(0xc340b4df3a698214)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xe83f4441391f4ad2), UINT64_C(0x3cbf4b20c5967dec)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xe83f4441391f4ad3), UINT64_C(0xc340b4df3a698214)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xe83f4441391f4ad3), UINT64_C(0xc340b4df3a698214)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x3bea82b0d8fbfe7c), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001), UINT64_C(0x30810cee93ae1ba3)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x303122b4c8821144)));
  EXPECT_EQ((T = A, T >>= 20), U128(UINT64_C(0x00000e83f4441391), UINT64_C(0xf4ad300000000000)));
  EXPECT_EQ((T = A, T <<= 20), U128(UINT64_C(0x441391f4ad300000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 20), U128(UINT64_C(0x00000e83f4441391), UINT64_C(0xf4ad300000000000)));
  EXPECT_EQ(rol(A, 20), U128(UINT64_C(0x441391f4ad300000), UINT64_C(0x00000000000e83f4)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xe83f4441391f4ad3), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0xe83f4441391f4ad3), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xe83f4441391f4ad3), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, U128(UINT64_C(0xe83f4441391f4ad2), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xe83f4441391f4ad3), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, U128(UINT64_C(0xe83f4441391f4ad3), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xe83f4441391f4ad2), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, U128(UINT64_C(0xe83f4441391f4ad2), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_69) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xd4edca5446a31e3d));
  const U128 B = U128(UINT64_C(0x7380a2d0b8d55566), UINT64_C(0x0000000000000000));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x7380a2d0b8d55566), UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x8c7f5d2f472aaa9a), UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x7380a2d0b8d55566), UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ(A | B, U128(UINT64_C(0x7380a2d0b8d55566), UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xd8fbc80c4ec94d4e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2b1235abb95ce1c3)));
  EXPECT_EQ(~A, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2b1235abb95ce1c2)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ(A >> 0, U128(UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ(A << 0, U128(UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x7380a2d0b8d55566), UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x8c7f5d2f472aaa9a), UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x7380a2d0b8d55566), UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0x7380a2d0b8d55566), UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xd8fbc80c4ec94d4e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ((T = A, T >>= 0), U128(UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ((T = A, T <<= 0), U128(UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ(ror(A, 0), U128(UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ(rol(A, 0), U128(UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ(T, U128(UINT64_C(0xd4edca5446a31e3e)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xd4edca5446a31e3d)));
  EXPECT_EQ(T, U128(UINT64_C(0xd4edca5446a31e3c)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xd4edca5446a31e3e)));
  EXPECT_EQ(T, U128(UINT64_C(0xd4edca5446a31e3e)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xd4edca5446a31e3c)));
  EXPECT_EQ(T, U128(UINT64_C(0xd4edca5446a31e3c)));
}

TEST(u128, autogen_basic_70) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x01a5a31a4e18f97a));
  const U128 B = U128(UINT64_C(0xae02d9fe03951508), UINT64_C(0x7f5b7b582bb32bb7));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xae02d9fe03951507), UINT64_C(0x81011e7279cc2531)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x51fd2601fc6aeaf6), UINT64_C(0x824a27c22265cdc3)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0x51fd2601fc6aeaf7), UINT64_C(0x7efed84265abd2cd)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7ffffb5a6fbbfbff)));
  EXPECT_EQ(A & B, U128(UINT64_C(0xae02d9fe03951508), UINT64_C(0x010123180a102932)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xe97238fa213b76cc), UINT64_C(0x83213039f40fd436)));
  EXPECT_EQ(-A, U128(UINT64_C(0xfe5a5ce5b1e70686)));
  EXPECT_EQ(~A, U128(UINT64_C(0xfe5a5ce5b1e70685)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x51fd2601fc6aeaf6), UINT64_C(0x824a27c22265cdc3)));
  EXPECT_EQ(A >> 55, U128(UINT64_C(0x00000000000001ff), UINT64_C(0xfffffffffffffe03)));
  EXPECT_EQ(A << 55, U128(UINT64_C(0xff80d2d18d270c7c), UINT64_C(0xbd00000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xae02d9fe03951507), UINT64_C(0x81011e7279cc2531)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x51fd2601fc6aeaf6), UINT64_C(0x824a27c22265cdc3)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0x51fd2601fc6aeaf7), UINT64_C(0x7efed84265abd2cd)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x7ffffb5a6fbbfbff)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0xae02d9fe03951508), UINT64_C(0x010123180a102932)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xe97238fa213b76cc), UINT64_C(0x83213039f40fd436)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x51fd2601fc6aeaf6), UINT64_C(0x824a27c22265cdc3)));
  EXPECT_EQ((T = A, T >>= 55), U128(UINT64_C(0x00000000000001ff), UINT64_C(0xfffffffffffffe03)));
  EXPECT_EQ((T = A, T <<= 55), U128(UINT64_C(0xff80d2d18d270c7c), UINT64_C(0xbd00000000000000)));
  EXPECT_EQ(ror(A, 55), U128(UINT64_C(0x4b46349c31f2f5ff), UINT64_C(0xfffffffffffffe03)));
  EXPECT_EQ(rol(A, 55), U128(UINT64_C(0xff80d2d18d270c7c), UINT64_C(0xbd7fffffffffffff)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x01a5a31a4e18f97a)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x01a5a31a4e18f97b)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x01a5a31a4e18f97a)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x01a5a31a4e18f979)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x01a5a31a4e18f97b)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x01a5a31a4e18f97b)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x01a5a31a4e18f979)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x01a5a31a4e18f979)));
}

TEST(u128, autogen_basic_71) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0xe2569a3035f652db));
  const U128 B = U128(-INT64_C(5813525995771076159));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0x91a8cf18b787349c)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x23372fea4f32ef3d), UINT64_C(0x33046547b465711a)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xdcc8d015b0cd10c3), UINT64_C(0x4d04aed8b466b31a)));
  EXPECT_EQ(A | B, U128(-INT64_C(1200562275233631269)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0xa2521020019040c1)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x90118c909223b393), UINT64_C(0xf653aa8d23b6f21b)));
  EXPECT_EQ(-A, U128(UINT64_C(0xdcc8d015b0cd10c3), UINT64_C(0x1da965cfca09ad25)));
  EXPECT_EQ(~A, U128(UINT64_C(0xdcc8d015b0cd10c3), UINT64_C(0x1da965cfca09ad24)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0xe2569a3035f652db)));
  EXPECT_EQ(A >> 65, U128(UINT64_C(0x119b97f52799779e)));
  EXPECT_EQ(A << 65, U128(UINT64_C(0xc4ad34606beca5b6), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0x91a8cf18b787349c)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x23372fea4f32ef3d), UINT64_C(0x33046547b465711a)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xdcc8d015b0cd10c3), UINT64_C(0x4d04aed8b466b31a)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(1200562275233631269)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0xa2521020019040c1)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x90118c909223b393), UINT64_C(0xf653aa8d23b6f21b)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0xe2569a3035f652db)));
  EXPECT_EQ((T = A, T >>= 65), U128(UINT64_C(0x119b97f52799779e)));
  EXPECT_EQ((T = A, T <<= 65), U128(UINT64_C(0xc4ad34606beca5b6), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 65), U128(UINT64_C(0x712b4d181afb296d), UINT64_C(0x919b97f52799779e)));
  EXPECT_EQ(rol(A, 65), U128(UINT64_C(0xc4ad34606beca5b6), UINT64_C(0x466e5fd49e65de79)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0xe2569a3035f652db)));
  EXPECT_EQ(T, U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0xe2569a3035f652dc)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0xe2569a3035f652db)));
  EXPECT_EQ(T, U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0xe2569a3035f652da)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0xe2569a3035f652dc)));
  EXPECT_EQ(T, U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0xe2569a3035f652dc)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0xe2569a3035f652da)));
  EXPECT_EQ(T, U128(UINT64_C(0x23372fea4f32ef3c), UINT64_C(0xe2569a3035f652da)));
}

TEST(u128, autogen_basic_72) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x108969eb3b3ed585));
  const U128 B = U128(-INT64_C(6601900797875341618));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xfffffffffffffffe), UINT64_C(0xb4eac01f1f848c53)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x6c2813b756f91eb7)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xb4e83fd8df7b634b)));
  EXPECT_EQ(A | B, U128(-INT64_C(5410652757008844849)));
  EXPECT_EQ(A & B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x0001402320049484)));
  EXPECT_EQ(A * B, U128(UINT64_C(0x55b3915e38452a37), UINT64_C(0x11af9d0159355f06)));
  EXPECT_EQ(-A, U128(UINT64_C(0xef769614c4c12a7b)));
  EXPECT_EQ(~A, U128(UINT64_C(0xef769614c4c12a7a)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x108969eb3b3ed585)));
  EXPECT_EQ(A >> 78, U128(UINT64_C(0x0003ffffffffffff)));
  EXPECT_EQ(A << 78, U128(UINT64_C(0x5a7acecfb5614000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xfffffffffffffffe), UINT64_C(0xb4eac01f1f848c53)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x6c2813b756f91eb7)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xb4e83fd8df7b634b)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(5410652757008844849)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x0001402320049484)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0x55b3915e38452a37), UINT64_C(0x11af9d0159355f06)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x108969eb3b3ed585)));
  EXPECT_EQ((T = A, T >>= 78), U128(UINT64_C(0x0003ffffffffffff)));
  EXPECT_EQ((T = A, T <<= 78), U128(UINT64_C(0x5a7acecfb5614000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 78), U128(UINT64_C(0xfffc4225a7acecfb), UINT64_C(0x5617ffffffffffff)));
  EXPECT_EQ(rol(A, 78), U128(UINT64_C(0x5a7acecfb5617fff), UINT64_C(0xffffffffffffc422)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x108969eb3b3ed585)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x108969eb3b3ed586)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x108969eb3b3ed585)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x108969eb3b3ed584)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x108969eb3b3ed586)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x108969eb3b3ed586)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x108969eb3b3ed584)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x108969eb3b3ed584)));
}

TEST(u128, autogen_basic_73) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2a34b94cb180a43f));
  const U128 B = U128(UINT64_C(0x37dc3b934fc904b0));
  U128 T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x6210f4e00149a8ef)));
  EXPECT_EQ(A - B, U128(UINT64_C(0xfffffffffffffffe), UINT64_C(0xf2587db961b79f8f)));
  EXPECT_EQ(A ^ B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x1de882dffe49a08f)));
  EXPECT_EQ(A | B, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x3ffcbbdfffc9a4bf)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x2214390001800430)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xd159675dd864a673), UINT64_C(0x40ff7d5d7178e750)));
  EXPECT_EQ(-A, U128(UINT64_C(0xd5cb46b34e7f5bc1)));
  EXPECT_EQ(~A, U128(UINT64_C(0xd5cb46b34e7f5bc0)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000004), UINT64_C(0x953679c2184342a9)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x34bff30e78872c0f)));
  EXPECT_EQ(A >> 48, U128(UINT64_C(0x000000000000ffff), UINT64_C(0xffffffffffff2a34)));
  EXPECT_EQ(A << 48, U128(UINT64_C(0xffff2a34b94cb180), UINT64_C(0xa43f000000000000)));
  EXPECT_EQ((T = A, T += B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x6210f4e00149a8ef)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0xfffffffffffffffe), UINT64_C(0xf2587db961b79f8f)));
  EXPECT_EQ((T = A, T ^= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x1de882dffe49a08f)));
  EXPECT_EQ((T = A, T |= B), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x3ffcbbdfffc9a4bf)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x2214390001800430)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xd159675dd864a673), UINT64_C(0x40ff7d5d7178e750)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000004), UINT64_C(0x953679c2184342a9)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x34bff30e78872c0f)));
  EXPECT_EQ((T = A, T >>= 48), U128(UINT64_C(0x000000000000ffff), UINT64_C(0xffffffffffff2a34)));
  EXPECT_EQ((T = A, T <<= 48), U128(UINT64_C(0xffff2a34b94cb180), UINT64_C(0xa43f000000000000)));
  EXPECT_EQ(ror(A, 48), U128(UINT64_C(0xb94cb180a43fffff), UINT64_C(0xffffffffffff2a34)));
  EXPECT_EQ(rol(A, 48), U128(UINT64_C(0xffff2a34b94cb180), UINT64_C(0xa43fffffffffffff)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2a34b94cb180a43f)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2a34b94cb180a440)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2a34b94cb180a43f)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2a34b94cb180a43e)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2a34b94cb180a440)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2a34b94cb180a440)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2a34b94cb180a43e)));
  EXPECT_EQ(T, U128(UINT64_C(0xffffffffffffffff), UINT64_C(0x2a34b94cb180a43e)));
}

TEST(u128, autogen_basic_74) {
  using U128 = erthink::uint128_t;
  const U128 A = U128(UINT64_C(0x34156830ffff7d89));
  const U128 B = U128(-INT64_C(5358010604346236574));
  U128 T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, U128(-INT64_C(1604990180200407317)));
  EXPECT_EQ(A - B, U128(UINT64_C(0x7e70e272b6d4dc27)));
  EXPECT_EQ(A ^ B, U128(-INT64_C(9101232174730453781)));
  EXPECT_EQ(A | B, U128(-INT64_C(5353111177465430549)));
  EXPECT_EQ(A & B, U128(UINT64_C(0x34040030492a2100)));
  EXPECT_EQ(A * B, U128(UINT64_C(0xf0df33663a4bb651), UINT64_C(0x7c5de726573b3772)));
  EXPECT_EQ(-A, U128(-INT64_C(3753020424145829257)));
  EXPECT_EQ(~A, U128(-INT64_C(3753020424145829258)));
  EXPECT_TRUE(A);
  EXPECT_EQ(U128::divmod(A, B).first, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(U128::divmod(A, B).second, U128(UINT64_C(0x34156830ffff7d89)));
  EXPECT_EQ(A >> 98, U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 98, U128(UINT64_C(0xfffdf62400000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), U128(-INT64_C(1604990180200407317)));
  EXPECT_EQ((T = A, T -= B), U128(UINT64_C(0x7e70e272b6d4dc27)));
  EXPECT_EQ((T = A, T ^= B), U128(-INT64_C(9101232174730453781)));
  EXPECT_EQ((T = A, T |= B), U128(-INT64_C(5353111177465430549)));
  EXPECT_EQ((T = A, T &= B), U128(UINT64_C(0x34040030492a2100)));
  EXPECT_EQ((T = A, T *= B), U128(UINT64_C(0xf0df33663a4bb651), UINT64_C(0x7c5de726573b3772)));
  EXPECT_EQ((T = A, T /= B), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), U128(UINT64_C(0x34156830ffff7d89)));
  EXPECT_EQ((T = A, T >>= 98), U128(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 98), U128(UINT64_C(0xfffdf62400000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 98), U128(UINT64_C(0x000000000d055a0c), UINT64_C(0x3fffdf6240000000)));
  EXPECT_EQ(rol(A, 98), U128(UINT64_C(0xfffdf62400000000), UINT64_C(0x00000000d055a0c3)));
  EXPECT_EQ((T = A, T++), U128(UINT64_C(0x34156830ffff7d89)));
  EXPECT_EQ(T, U128(UINT64_C(0x34156830ffff7d8a)));
  EXPECT_EQ((T = A, T--), U128(UINT64_C(0x34156830ffff7d89)));
  EXPECT_EQ(T, U128(UINT64_C(0x34156830ffff7d88)));
  EXPECT_EQ((T = A, ++T), U128(UINT64_C(0x34156830ffff7d8a)));
  EXPECT_EQ(T, U128(UINT64_C(0x34156830ffff7d8a)));
  EXPECT_EQ((T = A, --T), U128(UINT64_C(0x34156830ffff7d88)));
  EXPECT_EQ(T, U128(UINT64_C(0x34156830ffff7d88)));
}
#endif /* !ERTHINK_NATIVE_U128_TYPE */
